<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stack.blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/songMW/stack.github.io/"/>
  <updated>2018-07-30T11:07:08.491Z</updated>
  <id>https://github.com/songMW/stack.github.io/</id>
  
  <author>
    <name>stack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH登录</title>
    <link href="https://github.com/songMW/stack.github.io/2018/06/07/Hadoop/ssh%E7%99%BB%E5%BD%95/"/>
    <id>https://github.com/songMW/stack.github.io/2018/06/07/Hadoop/ssh登录/</id>
    <published>2018-06-07T07:52:13.000Z</published>
    <updated>2018-07-30T11:07:08.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#什么是SSH"> <font color="#0099ff" size="4px"> 什么是SSH</font></a> </li><li><a href="#linux无密login"><font color="#0099ff" size="4px">linux 无密login</font></a> </li></ul><a id="more"></a><h3 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h3><p><code>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。</code></p><p>ssh中，有两个钥匙：公钥、私钥 , 公钥主要是用于对一些敏感信息进行加密，私钥是用于对解密 。<br>ssh的文件都存在于机器的<code>~/.ssh</code>中。</p><p>客户机端：id_rsa(私钥) 、 id_rsa.pub(公钥) 、 known_hosts(已知远程主机)<br>服务器端：authorized_keys(验证过的公钥列表) 、 sshd_config(ssh配置文件)</p><h3 id="linux无密login"><a href="#linux无密login" class="headerlink" title="linux无密login"></a>linux无密login</h3><p>linux的远程登录默认是需要密码的，但是我们可以通过ssh通道，进行无密登录，也就是说每次登录只需要 <code>ssh username@host</code> 就能成功登录远程机器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/ssh/sshd_config</span><br><span class="line">RSAAuthentication yes　　</span><br><span class="line">PubkeyAuthentication yes　　</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line">把以上的最前面的＃去掉 。</span><br><span class="line">$ service ssh restart</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure></p><p>每次登陆都需要输入IP地址？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">为要登陆的IP地址设置一个别名</span><br><span class="line">192.168.1.1  newName</span><br></pre></td></tr></table></figure></p><p>接下来配置登陆名，端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/ssh_config</span><br><span class="line"></span><br><span class="line">Host            新的用于ssh登录的名称 -&gt; (loginName)</span><br><span class="line">HostName        newName  </span><br><span class="line">Port            2222</span><br><span class="line">User            userName</span><br><span class="line">IdentityFile    ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>完成之后就可以直接使用<code>ssh loginName</code> 登陆。第一次登陆可能会出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh loginName</span><br><span class="line">The authenticity of host &apos;192.168.1.1 (192.168.1.1)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:8bZUeFxyoxL9oYhc5aAZjgSZ5CT1oGYEYoehN/OLEYY.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>因为这是第一次登录，ssh无法判断远程的服务端是否是正确的，在这里如果有人中间截获了你的登录请求，并且模拟ssh服务端的话，你的密码就会泄漏（中间人攻击），所以ssh会询问你：远程服务端的指纹是：xxxx，是不是确定登录。<br> 输入yes，然后输入登陆密码，是要登陆服务器的密码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#什么是SSH&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt; 什么是SSH&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#linux无密login&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;linux 无密login&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://github.com/songMW/stack.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://github.com/songMW/stack.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Category</title>
    <link href="https://github.com/songMW/stack.github.io/2018/05/07/Objective-C/Category/"/>
    <id>https://github.com/songMW/stack.github.io/2018/05/07/Objective-C/Category/</id>
    <published>2018-05-07T07:07:43.000Z</published>
    <updated>2018-07-30T11:14:32.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#Category的本质"> <font color="#0099ff" size="4px">Category的本质是什么？</font></a> </li><li><a href="#类别中添加实例"><font color="#0099ff" size="4px">Category为什么只能加方法不能加属性</font></a> </li><li><a href="#Category中load方法"> <font color="#0099ff" size="4px">Category中有load方法吗？load方法是什么时候调用的？load 方法能继承吗</font></a> </li><li><a href="#如果多个分类中同时声明了相同的方法会如何调用"><font color="#0099ff" size="4px">如果多个分类中同时声明了相同的方法会如何调用?</font></a> <a id="more"></a></li></ul><h2 id="Category的本质"><a href="#Category的本质" class="headerlink" title="Category的本质"></a>Category的本质</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Presen类 </span></span><br><span class="line"><span class="comment">// Presen.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Preson</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)run;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Presen.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Preson.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Preson</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)run</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Person - run"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Presen扩展</span></span><br><span class="line"><span class="comment">// Presen+Test.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Preson.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">PersonDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)delegateTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Preson</span> (<span class="title">Test</span>) &lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="keyword">id</span> &lt;PersonDelegate&gt; deleage;</span><br><span class="line">- (<span class="keyword">void</span>)test;</span><br><span class="line">+ (<span class="keyword">void</span>)abc;</span><br><span class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>)age;</span><br><span class="line">- (<span class="keyword">int</span>)age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Presen+Test.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Preson+Test.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Preson</span> (<span class="title">Test</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)abc</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)run</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Person (Test) - run"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">Presen分类<span class="number">2</span></span><br><span class="line"><span class="comment">// Preson+Test2.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Preson.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Preson</span> (<span class="title">Test2</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Preson+Test2.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Preson+Test2.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Preson</span> (<span class="title">Test2</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)run</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Person (Test2) - run"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="Category的底层结构"><a href="#Category的底层结构" class="headerlink" title="Category的底层结构"></a>Category的底层结构</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> _category_t &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;                              <span class="comment">// 类名</span></span><br><span class="line">    <span class="keyword">struct</span> _class_t *cls;                          <span class="comment">// 指向主类类对象的地址</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _method_list_t *instance_methods; <span class="comment">// 实例方法列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _method_list_t *class_methods;    <span class="comment">// 类方法列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _protocol_list_t *protocols;      <span class="comment">// 协议列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _prop_list_t *properties;         <span class="comment">// 属性列表</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从Category的结构体中可以看到有实例方法列表，类方法列表，协议列表和属性列表。没有实例列表。<br>查看下_category_t 内部结构分别是什么？</p><h4 id="结构体中有一个-method-list-t-它是什么？"><a href="#结构体中有一个-method-list-t-它是什么？" class="headerlink" title="结构体中有一个 _method_list_t 它是什么？"></a>结构体中有一个 <code>_method_list_t</code> 它是什么？</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="comment">/*_method_list_t*/</span> &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> entsize;  <span class="comment">// sizeof(struct _objc_method)</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> method_count;</span><br><span class="line">    <span class="keyword">struct</span> _objc_method method_list[<span class="number">3</span>];</span><br><span class="line">&#125; _OBJC_$_CATEGORY_INSTANCE_METHODS_Person_$_Test __attribute__ ((used, section                 (<span class="string">"__DATA,__objc_const"</span>))) = &#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(_objc_method),</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    &#123;&#123;(<span class="keyword">struct</span> objc_selector *)<span class="string">"test"</span>, <span class="string">"v16@0:8"</span>, (<span class="keyword">void</span> *)_I_Person_Test_test&#125;,</span><br><span class="line">    &#123;(<span class="keyword">struct</span> objc_selector *)<span class="string">"setAge:"</span>, <span class="string">"v20@0:8i16"</span>, (<span class="keyword">void</span> *)_I_Person_Test_setAge_&#125;,</span><br><span class="line">    &#123;(<span class="keyword">struct</span> objc_selector *)<span class="string">"age"</span>, <span class="string">"i16@0:8"</span>, (<span class="keyword">void</span> *)_I_Person_Test_age&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="comment">/*_method_list_t*/</span> &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> entsize;  <span class="comment">// sizeof(struct _objc_method)</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> method_count;</span><br><span class="line">    <span class="keyword">struct</span> _objc_method method_list[<span class="number">1</span>];</span><br><span class="line">&#125; _OBJC_$_CATEGORY_CLASS_METHODS_Person_$_Test __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) = &#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(_objc_method),</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    &#123;&#123;(<span class="keyword">struct</span> objc_selector *)<span class="string">"abc"</span>, <span class="string">"v16@0:8"</span>, (<span class="keyword">void</span> *)_C_Person_Test_abc&#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>可以看出 <code>_method_list_t</code> 是保存实例方法与类方法的列表。</li><li>其结构体中存储了方法占用的内存，方法数量，以及方法列表。</li><li><code>_OBJC_$_CATEGORY_INSTANCE_METHODS_Person_$_Test</code> 是对象方法，与上文中声明的对象方法数量和名称对应一致。</li><li><code>_OBJC_$_CATEGORY_CLASS_METHODS_Person_$_Test</code> 是类方法，与上文中声明的类方法数量和名称对应一致。</li></ol><h4 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static struct /*_prop_list_t*/ &#123;</span><br><span class="line">    unsigned int entsize;  // sizeof(struct _prop_t)</span><br><span class="line">    unsigned int count_of_properties;</span><br><span class="line">    struct _prop_t prop_list[2];</span><br><span class="line">&#125; _OBJC_$_PROP_LIST_Person_$_Test __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = &#123;</span><br><span class="line">    sizeof(_prop_t),</span><br><span class="line">    2,</span><br><span class="line">    &#123;&#123;&quot;age&quot;,&quot;Ti,N&quot;&#125;,</span><br><span class="line">    &#123;&quot;deleage&quot;,&quot;T@\&quot;&lt;PersonDelegate&gt;\&quot;,D,N&quot;&#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><code>_OBJC_$_PROP_LIST_Preson_$_Test</code>是属性列表结构体，存储属性的占用空间，属性数量，以及属性列表。</li><li><code>age, delegate</code> 是类中声明的属性。</li><li>类别中添加属性不会自动生成set，get方法，需要手动实现。</li></ol><h4 id="类别中添加实例"><a href="#类别中添加实例" class="headerlink" title="类别中添加实例"></a>类别中添加实例</h4><p>会报错  <code>Instance variables may not be placed in categories</code>;<br>原因：从Category的结构体中没有可以保存实例的列表。见<a href="#Category的底层结构">_category_t</a></p><h4 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> _category_t &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;                              <span class="comment">// 类名</span></span><br><span class="line">    <span class="keyword">struct</span> _class_t *cls;                          <span class="comment">// 指向主类类对象的地址</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _method_list_t *instance_methods; <span class="comment">// 实例方法列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _method_list_t *class_methods;    <span class="comment">// 类方法列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _protocol_list_t *protocols;      <span class="comment">// 协议列表</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> _prop_list_t *properties;         <span class="comment">// 属性列表</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> _category_t _OBJC_$_CATEGORY_Person_$_Test __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Person"</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="comment">// &amp;OBJC_CLASS_$_Person,</span></span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">struct</span> _method_list_t *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_Person_$_Test,</span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">struct</span> _method_list_t *)&amp;_OBJC_$_CATEGORY_CLASS_METHODS_Person_$_Test,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">struct</span> _prop_list_t *)&amp;_OBJC_$_PROP_LIST_Person_$_Test,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面两段代码是一一对应关系，分类源码中定义的对象方法，类方法，属性等都存放在catagory_t结构体中。</p><h3 id="catagory-t是如何将定义的方法，属性，协议等存储在类对象中的？"><a href="#catagory-t是如何将定义的方法，属性，协议等存储在类对象中的？" class="headerlink" title="catagory_t是如何将定义的方法，属性，协议等存储在类对象中的？"></a>catagory_t是如何将定义的方法，属性，协议等存储在类对象中的？</h3><p>查看<code>runtime</code>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* map_images</span><br><span class="line">* Process the given images which are being mapped in by dyld.</span><br><span class="line">* Calls ABI-agnostic code after taking ABI-specific locks.</span><br><span class="line">*</span><br><span class="line">* Locking: write-locks runtimeLock</span><br><span class="line">**********************************************************************/</span><br><span class="line">void map_2_images(unsigned count, const char * const paths[], const struct mach_header * const mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">    rwlock_writer_t lock(runtimeLock);</span><br><span class="line">    return map_images_nolock(count, paths, mhdrs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">* _read_images</span><br><span class="line">* Perform initial processing of the headers in the linked </span><br><span class="line">* list beginning with headerList. </span><br><span class="line">*</span><br><span class="line">* Called by: map_images_nolock</span><br><span class="line">*</span><br><span class="line">* Locking: runtimeLock acquired by map_images</span><br><span class="line">**********************************************************************/</span><br><span class="line">void _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    // Discover categories. </span><br><span class="line">    for (EACH_HEADER) &#123;</span><br><span class="line">        category_t **catlist = _getObjc2CategoryList(hi, &amp;count);</span><br><span class="line">        bool hasClassProperties = hi-&gt;info()-&gt;hasCategoryClassProperties();</span><br><span class="line">    </span><br><span class="line">        for (i = 0; i &lt; count; i++) &#123;</span><br><span class="line">            category_t *cat = catlist[i];</span><br><span class="line">            Class cls = remapClass(cat-&gt;cls);</span><br><span class="line">    </span><br><span class="line">            if (!cls) &#123;</span><br><span class="line">                // Category&apos;s target class is missing (probably weak-linked).</span><br><span class="line">                // Disavow any knowledge of this category.</span><br><span class="line">                catlist[i] = nil;</span><br><span class="line">                if (PrintConnecting) &#123;</span><br><span class="line">                    _objc_inform(&quot;CLASS: IGNORING category \?\?\?(%s) %p with &quot;</span><br><span class="line">                    &quot;missing weak-linked target class&quot;, </span><br><span class="line">                    cat-&gt;name, cat);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            // Process this category. </span><br><span class="line">            // First, register the category with its target class. </span><br><span class="line">            // Then, rebuild the class&apos;s method lists (etc) if </span><br><span class="line">            // the class is realized. </span><br><span class="line">            bool classExists = NO;</span><br><span class="line">            if (cat-&gt;instanceMethods || </span><br><span class="line">                cat-&gt;protocols       ||</span><br><span class="line">                cat-&gt;instanceProperties) &#123;</span><br><span class="line">                addUnattachedCategoryForClass(cat, cls, hi);</span><br><span class="line">                if (cls-&gt;isRealized()) &#123;</span><br><span class="line">                    remethodizeClass(cls);</span><br><span class="line">                    classExists = YES;</span><br><span class="line">                &#125;</span><br><span class="line">                if (PrintConnecting) &#123;</span><br><span class="line">                    _objc_inform(&quot;CLASS: found category -%s(%s) %s&quot;, cls-&gt;nameForLogging(), cat-&gt;name, classExists ? &quot;on existing class&quot; : &quot;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            if (cat-&gt;classMethods   || </span><br><span class="line">                cat-&gt;protocols      ||</span><br><span class="line">                (hasClassProperties &amp;&amp; </span><br><span class="line">                cat-&gt;_classProperties)) &#123;</span><br><span class="line">                </span><br><span class="line">                addUnattachedCategoryForClass(cat, cls-&gt;ISA(), hi);</span><br><span class="line">                if (cls-&gt;ISA()-&gt;isRealized()) &#123;</span><br><span class="line">                    remethodizeClass(cls-&gt;ISA());</span><br><span class="line">                &#125;</span><br><span class="line">                if (PrintConnecting) &#123;</span><br><span class="line">                    _objc_inform(&quot;CLASS: found category +%s(%s)&quot;, cls-&gt;nameForLogging(), cat-&gt;name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>_getObjc2CategoryList</code>函数获取到分类列表之后，进行遍历，获取其中的方法，协议，属性等。<br>最终调用了<code>remethodizeClass(cls)</code>函数</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* remethodizeClass</span></span><br><span class="line"><span class="comment">* Attach outstanding categories to an existing class.</span></span><br><span class="line"><span class="comment">* Fixes up cls's method list, protocol list, and property list.</span></span><br><span class="line"><span class="comment">* Updates method caches for cls and its subclasses.</span></span><br><span class="line"><span class="comment">* Locking: runtimeLock must be held by the caller</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> remethodizeClass(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    category_list *cats;</span><br><span class="line">    <span class="keyword">bool</span> isMeta;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertWriting();</span><br><span class="line"></span><br><span class="line">    isMeta = cls-&gt;isMetaClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-methodizing: check for more categories</span></span><br><span class="line">    <span class="keyword">if</span> ((cats = unattachedCategoriesForClass(cls, <span class="literal">false</span><span class="comment">/*not realizing*/</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PrintConnecting) &#123;</span><br><span class="line">            _objc_inform(<span class="string">"CLASS: attaching categories to class '%s' %s"</span>, </span><br><span class="line">            cls-&gt;nameForLogging(), isMeta ? <span class="string">"(meta)"</span> : <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        attachCategories(cls, cats, <span class="literal">true</span> <span class="comment">/*flush caches*/</span>);        </span><br><span class="line">        free(cats);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中主要出现<code>attachCategories</code> ，看看它又是什么？<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Attach method lists and properties and protocols from categories to a class.</span></span><br><span class="line"><span class="comment">// Assumes the categories in cats are all loaded and sorted by load order, </span></span><br><span class="line"><span class="comment">// oldest categories first.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> attachCategories(Class cls, category_list *cats, <span class="keyword">bool</span> flush_caches)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cats) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (PrintReplacedMethods) printReplacements(cls, cats);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isMeta = cls-&gt;isMetaClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fixme rearrange to remove these intermediate allocations</span></span><br><span class="line">    method_list_t **mlists = (method_list_t **)</span><br><span class="line">    malloc(cats-&gt;count * <span class="keyword">sizeof</span>(*mlists));</span><br><span class="line">    property_list_t **proplists = (property_list_t **)</span><br><span class="line">    malloc(cats-&gt;count * <span class="keyword">sizeof</span>(*proplists));</span><br><span class="line">    protocol_list_t **protolists = (protocol_list_t **)</span><br><span class="line">    malloc(cats-&gt;count * <span class="keyword">sizeof</span>(*protolists));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Count backwards through cats to get newest categories first</span></span><br><span class="line">    <span class="keyword">int</span> mcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> propcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> protocount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = cats-&gt;count;</span><br><span class="line">    <span class="keyword">bool</span> fromBundle = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        auto&amp; entry = cats-&gt;list[i];</span><br><span class="line"></span><br><span class="line">        method_list_t *mlist = entry.cat-&gt;methodsForMeta(isMeta);</span><br><span class="line">        <span class="keyword">if</span> (mlist) &#123;</span><br><span class="line">            mlists[mcount++] = mlist;</span><br><span class="line">            fromBundle |= entry.hi-&gt;isBundle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        property_list_t *proplist = entry.cat-&gt;propertiesForMeta(isMeta, entry.hi);</span><br><span class="line">        <span class="keyword">if</span> (proplist) &#123;</span><br><span class="line">            proplists[propcount++] = proplist;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protocol_list_t *protolist = entry.cat-&gt;protocols;</span><br><span class="line">        <span class="keyword">if</span> (protolist) &#123;</span><br><span class="line">            protolists[protocount++] = protolist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto rw = cls-&gt;data();</span><br><span class="line"></span><br><span class="line">    prepareMethodLists(cls, mlists, mcount, <span class="literal">NO</span>, fromBundle);</span><br><span class="line">    rw-&gt;methods.attachLists(mlists, mcount);</span><br><span class="line">    free(mlists);</span><br><span class="line">    <span class="keyword">if</span> (flush_caches  &amp;&amp;  mcount &gt; <span class="number">0</span>) </span><br><span class="line">        flushCaches(cls);</span><br><span class="line"></span><br><span class="line">    rw-&gt;properties.attachLists(proplists, propcount);</span><br><span class="line">    free(proplists);</span><br><span class="line"></span><br><span class="line">    rw-&gt;protocols.attachLists(protolists, protocount);</span><br><span class="line">    free(protolists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分类方法的列表会被追加到本来的对象方法前面，不是覆盖，是优先调用。可以通过打印所有类的所有方法名来查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018-05-07 14:33:19.972168+0800 Category[6598:558202] Person (Test2) - run</span><br><span class="line">2018-05-07 14:33:19.972424+0800 Category[6598:558202] test</span><br><span class="line">2018-05-07 14:33:19.972566+0800 Category[6598:558202] run</span><br><span class="line">2018-05-07 14:33:19.972681+0800 Category[6598:558202] run</span><br><span class="line">2018-05-07 14:33:19.972966+0800 Category[6598:558202] run</span><br><span class="line">2018-05-07 14:33:19.973125+0800 Category[6598:558202] setAge:</span><br><span class="line">2018-05-07 14:33:19.973226+0800 Category[6598:558202] age</span><br></pre></td></tr></table></figure></p><p>上文代码中主类和两个分类中分别声明了方法<code>- (void)run</code>，打印当前类所有方法名可以发现run出现了三次，所有证明分类只是被添加到主类的方法缓存列表的前面，以便优先调用，不是覆盖，不是覆盖，不是覆盖。</p><p>分类的实现原理是将category中的方法，属性，协议数据放在category_t结构体中，然后结构体内的方法列表拷贝到类对象的方法列表中。</p><h2 id="如果多个分类中同时声明了相同的方法会如何调用"><a href="#如果多个分类中同时声明了相同的方法会如何调用" class="headerlink" title="如果多个分类中同时声明了相同的方法会如何调用"></a>如果多个分类中同时声明了相同的方法会如何调用</h2><p>根据 <code>Xcode -&gt; Build Phases -&gt; Compile Sources</code> 中分类的顺序来决定，下面的分类优先调用。</p><h2 id="Category中load方法"><a href="#Category中load方法" class="headerlink" title="Category中load方法"></a>Category中load方法</h2><p>查看<code>objc_loadmethod.mm</code>源码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* call_load_methods</span></span><br><span class="line"><span class="comment">* Call all pending class and category +load methods.</span></span><br><span class="line"><span class="comment">* Class +load methods are called superclass-first. </span></span><br><span class="line"><span class="comment">* Category +load methods are not called until after the parent class's +load.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* This method must be RE-ENTRANT, because a +load could trigger </span></span><br><span class="line"><span class="comment">* more image mapping. In addition, the superclass-first ordering </span></span><br><span class="line"><span class="comment">* must be preserved in the face of re-entrant calls. Therefore, </span></span><br><span class="line"><span class="comment">* only the OUTERMOST call of this function will do anything, and </span></span><br><span class="line"><span class="comment">* that call will handle all loadable classes, even those generated </span></span><br><span class="line"><span class="comment">* while it was running.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* The sequence below preserves +load ordering in the face of </span></span><br><span class="line"><span class="comment">* image loading during a +load, and make sure that no </span></span><br><span class="line"><span class="comment">* +load method is forgotten because it was added during </span></span><br><span class="line"><span class="comment">* a +load call.</span></span><br><span class="line"><span class="comment">* Sequence:</span></span><br><span class="line"><span class="comment">* 1. Repeatedly call class +loads until there aren't any more</span></span><br><span class="line"><span class="comment">* 2. Call category +loads ONCE.</span></span><br><span class="line"><span class="comment">* 3. Run more +loads if:</span></span><br><span class="line"><span class="comment">*    (a) there are more classes to load, OR</span></span><br><span class="line"><span class="comment">*    (b) there are some potential category +loads that have </span></span><br><span class="line"><span class="comment">*        still never been attempted.</span></span><br><span class="line"><span class="comment">* Category +loads are only run once to ensure "parent class first" </span></span><br><span class="line"><span class="comment">* ordering, even if a category +load triggers a new loadable class </span></span><br><span class="line"><span class="comment">* and a new loadable category attached to that class. </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Locking: loadMethodLock must be held by the caller </span></span><br><span class="line"><span class="comment">*   All other locks must not be held.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="keyword">void</span> call_load_methods(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> loading = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">bool</span> more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    loading = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Repeatedly call class +loads until there aren't any more</span></span><br><span class="line">    <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        call_class_loads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">    more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>优先调用类的load方法之后调用分类的load方法，不过调用类的load方法之前会保证其父类已经调用过load方法。</li><li>多个分类的<code>load</code>方法调用：根据 <code>Xcode -&gt; Build Phases -&gt; Compile Sources</code> 中分类的顺序来决定，下面的分类优先调用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Category的本质&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;Category的本质是什么？&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#类别中添加实例&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;Category为什么只能加方法不能加属性&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Category中load方法&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;Category中有load方法吗？load方法是什么时候调用的？load 方法能继承吗&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如果多个分类中同时声明了相同的方法会如何调用&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;如果多个分类中同时声明了相同的方法会如何调用?&lt;/font&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Category" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Category/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop for mac</title>
    <link href="https://github.com/songMW/stack.github.io/2018/03/19/Hadoop/HadoopForMac/"/>
    <id>https://github.com/songMW/stack.github.io/2018/03/19/Hadoop/HadoopForMac/</id>
    <published>2018-03-19T07:17:39.000Z</published>
    <updated>2018-07-30T11:11:31.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#什么是Hadoop?"> <font color="#0099ff" size="4px"> 什么是Hadoop</font></a> </li><li><a href="#HDFS基本概念"><font color="#0099ff" size="4px">HDFS基本概念</font></a> </li><li><a href="#Hadoop核心"> <font color="#0099ff" size="4px">Hadoop核心</font></a> </li><li><a href="#HDFS的架构"><font color="#0099ff" size="4px">HDFS的架构</font></a> </li><li><a href="#JAVA环境"> <font color="#0099ff" size="4px">JAVA api 环境</font></a> </li><li><a href="#Hadoop优点"><font color="#0099ff" size="4px">Hadoop优点</font></a> </li><li><a href="#初始化HDFS"> <font color="#0099ff" size="4px">初始化HDFS</font></a> </li><li><a href="#测试HDFS"><font color="#0099ff" size="4px"> 测试HDFS</font></a> </li><li><a href="#测试MR和YARN"><font color="#0099ff" size="4px">  测试MR和YARN</font></a> </li></ul><a id="more"></a><h2 id="什么是Hadoop"><a href="#什么是Hadoop" class="headerlink" title="什么是Hadoop?"></a>什么是Hadoop?</h2><ol><li>开源，可靠的，可扩展的分布式计算开发开源软件；</li><li>作者：Doug Cutting；</li><li>受Goole三篇论文启发（GFS，MapReduce，BigTabel）。</li></ol><p>解释：</p><ul><li>开源：说明是免费；</li><li>可靠： 数据由备份，可自动恢复</li><li>可扩展：灵活性高</li></ul><h2 id="HDFS基本概念"><a href="#HDFS基本概念" class="headerlink" title="HDFS基本概念"></a>HDFS基本概念</h2><ol><li>Java实现，分布式，可横向扩展的分布式文件系统</li><li>HDFS是Hadoop核心</li><li>基于unix，linix系统</li><li>容错性高，高吞吐量的数据访问</li><li>简单一致性模型<ul><li>一次写入多次查询，写入文件不能修改，如需修改先删除再写入新数据</li><li>不支持并发写入</li><li>小文件不适合</li></ul></li><li>硬件错误是常态</li><li>流式数据访问，适用于处理批量，不适合随机定位访问</li><li>存储超大文件， PB/EB，单个文件一般在百MB以上</li><li>采用就近原则分配节点执行<ul><li>有ABC三台服务器，在A中执行下载任务，则在A上分配节点，不会在其他服务器上分配</li></ul></li><li>运行在廉价的服务器上</li><li>HDFS局限性<ul><li>不适合低延迟数据访问</li><li>高吞吐量可能要求以高延迟作代价</li><li>无法高效存储小文件</li><li>文件数量限制由NameNode决定</li><li>不支持多用户写入与修改</li></ul></li><li>冗余副本策略<ul><li><code>hdfs-site.xml</code> 设置指定副本数量，所有数据库都有副本</li></ul></li><li>机架策略<ul><li>集群一般在不同的机架上</li><li>机架间带宽 &lt; 机架内带宽</li></ul></li><li>心跳机制<ul><li>NameNode周期性从DataNode接收心跳信号和块报告</li><li>NameNode根据块报告验证元数据</li><li>没有按时发送心跳的DataNode会被标记为宕机，不再有I/O请求</li></ul></li><li>块<ul><li>HDFS基于存储是块，块是读写的最小数据单位</li><li>Hadoop 1.x 默认64M</li><li>Hadoop 2.x默认128M</li><li>存储200M文件<ul><li>1.x 分四个块 3个64M块，一个8M块</li><li>2.x 分两个块 1个128M块，一个72M块</li></ul></li><li>块大小可自行配置，建议使用默认<ul><li>每个块都有一个自己的全局ID</li><li>每个块都是独立存储单位</li></ul></li><li><code>hdfs-site.xml</code> 配置<ul><li>1.x 对应 dfs.block.size</li><li>2.x 对应 dfs.blocksize</li></ul></li><li>一份元数据，两份备份，可以动态修改备份数</li></ul></li><li>HDFS元数据<ul><li>文件系统目录树信息<ul><li>文件名，目录名</li><li>文件目录从属关系</li><li>文件目录的大小，创建及最后访问时间</li><li>文件目录的权限</li></ul></li></ul></li></ol><h2 id="Hadoop核心"><a href="#Hadoop核心" class="headerlink" title="Hadoop核心"></a>Hadoop核心</h2><ol><li>HDFS：Hadoop Distributed File System 分布式文件系统</li><li>YARN：Yet Another Resource Negotiator 资源管理调度系统</li><li>Common：公共模块，为其他 Hadoop 模块提供基础设施</li><li>MapReduce：处理数据，一个分布式并行框架<ul><li>读取输入文件内容，解析成 key, value 对</li><li>重写 map 方法，编写业务逻辑输出新的 key, value 对</li><li>对输出的 key, value 分区</li><li>对数据按照 key 排序，分组，相同 key 的 value 放到一个集合中</li></ul></li></ol><h2 id="HDFS的架构"><a href="#HDFS的架构" class="headerlink" title="HDFS的架构"></a>HDFS的架构</h2><h3 id="NameNode-概述"><a href="#NameNode-概述" class="headerlink" title="NameNode 概述"></a>NameNode 概述</h3><ol><li>NameNode（Master）是 HDFS 的核心。</li><li>NameNode 仅存储 HDFS 的元数据：文件系统中所有的目录树，并跟踪整个集中的文件。</li><li>NameNode 不存储实际数据或数据集，数据本身实际存储在 DataNodes 中。</li><li>NameNode 知道HDFS 中任何给定文件的块列表及其位置。</li><li>NameNode 并不持久化存储每个文件中各个块所在的 DataNode 的位置信息。</li><li>NameNode 关闭时，HDFS / Hadoop 集群无法访问。</li><li>NameNode 是 Hadoop 集群中的单点故障，NameNode 不可用时导致整个集群不可用。</li><li>NameNode 所在机器通常会配置有大量内存。</li><li>NameNode 是主节点。</li><li>SecondaryNameNode 协助 NameNode 进行元数据的备份。</li><li>响应客户端的所有请求。</li><li>管理 DataNode。</li></ol><h3 id="DataNode概述"><a href="#DataNode概述" class="headerlink" title="DataNode概述"></a>DataNode概述</h3><ol><li>DataNode（Slave）负责将实际数据存储在 HDFS 中。</li><li>NameNode 和 DataNode 会保持不断通信。</li><li>DataNode 启动时，将自己发布到 NameNode 并回报自己负责持有的块列表。</li><li>当某个 DataNode 关闭时，不会影响数据或集群的可用性。NameNode安排由其他的 NameNode 管理的块进行副本复制。</li><li>DataNode 所在机器配置有大量的硬盘空间，因为实际数据保存在 DataNode 中。</li><li>DataNode 会定期（<code>dfs.hearbead.interval</code> 配置项配置，默认是3秒）给 NameNode 发送心跳，如果NameNode 长时间没有接收到 DataNode 发送的心跳， NameNode 就会认为该 DataNode 失效。</li><li>block 汇报时间间隔参数 <code>dfs.blockreport.intervalMsec</code> 参数未配置的默认为6小时。</li><li>DataNode 是从节点。</li></ol><h3 id="HDFS-的工作机制"><a href="#HDFS-的工作机制" class="headerlink" title="HDFS 的工作机制"></a>HDFS 的工作机制</h3><p>客户端请求访问 HDFS 都是通过向 NameNode 申请来进行。<br>Rack 机架，存放机器的设施。</p><h4 id="HDFS-写入数据"><a href="#HDFS-写入数据" class="headerlink" title="HDFS 写入数据"></a>HDFS 写入数据</h4><blockquote><p>详细步骤解析：<br>一个HDFS集群有一个 NameNode 多个 DataNode。<br><code>hadoop fs -put 本地文件路径 hadoop文件目录</code></p><ol><li>请求上传文件，文件名为a.text，上传到定义目录下。</li><li>NameNode 接收到请求，先检测文件系统目录树，检测成功可正常上传，检测不成功，返回错误。</li><li>客户端接收到可以上传的回应。</li><li>HDFS 会将上传的文件进行分割，128M为一块。请求上传 a.txt blk-1 备份3份。</li><li>NameNode 检测 DataName 信息池，返回可用的3台 DataNode ip (dn1, dn2, dn3)。分配策略：本地一份，同机架的不同节点上保存一份，不同的机架上保存一份。</li><li>返回可用的 DataNode ip (dn1，dn2，dn3)；<ul><li>返回的地址按照网络拓扑上的距离来排序</li><li>离客户端最近的排在前面</li></ul></li><li>客户端根据返回的 DataNode ip  建立连接请求数据传输，建立 <code>pipelin</code> 管道。<ul><li>客户端首先与 dn1 建立管道</li><li>dn1 与 dn2 建立管道</li><li>dn2 与 dn3 建立管道</li></ul></li><li>dn3 建立管道完成后通知 dn2 ，dn2 通知 dn1，dn1通知客户端。</li><li>客户端在管道中建立数据传输的 Stream，以 packet （64k）为单位发送数据 。</li><li>dn1 保存传递过来的源源不断的数据包，包接着传递到 dn2，在传递到 dn3。。。</li><li>数据校验，数据保存成功<ul><li>dn3 -&gt; dn2 -&gt; dn1</li></ul></li><li>数据校验后 dn1 返回结果到客户端。</li></ol></blockquote><h4 id="HDFS-读取数据"><a href="#HDFS-读取数据" class="headerlink" title="HDFS 读取数据"></a>HDFS 读取数据</h4><blockquote><p>详细步骤解析：<br>一个HDFS集群有一个 NameNode 多个 DataNode。<br><code>hadoop fs -get hadoop文件目录 本地文件路径</code></p><ol><li>请求下载文件 /a.txt</li><li>NameNode 返回与请求相关的文件所有的元数据<ul><li>就近原则：在网络拓扑结构上离客户端最近的机器排在前面。</li></ul></li><li>客户端请求下载文件<ul><li>建立线程请求下载文件 blk-1</li><li>建立线程请求下载文件 blk-2</li><li>建立线程请求下载文件 blk-3</li></ul></li><li>客户端把改文件的所有块都下载进行合并成为文件的最终形式</li></ol></blockquote><h2 id="JAVA环境"><a href="#JAVA环境" class="headerlink" title="JAVA环境"></a>JAVA环境</h2><h3 id="创建-Maven-工程，引入-pom-依赖"><a href="#创建-Maven-工程，引入-pom-依赖" class="headerlink" title="创建 Maven 工程，引入 pom 依赖"></a>创建 Maven 工程，引入 pom 依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;hadoop-mapreduce-client-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="构造客户端对象"><a href="#构造客户端对象" class="headerlink" title="构造客户端对象"></a>构造客户端对象</h3><ol><li><code>Configuration</code> ：该类的对象封装了客户端或者服务器的配置；</li><li><code>FileSystem</code> ：该类的对象是一个文件系统对象，可以用该对象的一些方法来对文件进行操作，通过 <code>FileSystem</code> 的静态方法 get 获得该对象。<ul><li><code>FileSystem fs = FileSystem.get(conf)</code></li><li>如果代码中没有指定 <code>fs.defaultFS</code> 的配置值并且工程也没有给定相应的配置，conf 中的默认值来自Hadoop 的 jar 包中的 <code>core-default.xm</code>，默认值为：file:///，则获取的不是一个 <code>DistributedFileSystem</code> 的实例，而是本地文件系统的客户端对象。</li></ul></li></ol><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Configuration conf = new Configuration();</span><br><span class="line">conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs://hadoophost:9000&quot;);</span><br><span class="line">&lt;!--&quot;xxx&quot; 设置当前客户端身份--&gt;</span><br><span class="line">FileSystem fs = FileSystem.get(new URI(&quot;hdfs://hadoophost:9000&quot;), conf, &quot;xxx&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--System.setProperty(&quot;HADOOP_USER_NAME&quot;, &quot;xxx&quot;);--&gt;</span><br><span class="line">&lt;!--FileSystem fs = FileSystem.get(conf);--&gt;</span><br><span class="line"></span><br><span class="line">fs.create(new Path(&quot;/HelloByJava&quot;));</span><br><span class="line">fs.close();</span><br></pre></td></tr></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void downloadfile(FileSystem fs) throws Exception &#123;</span><br><span class="line">    fs.copyToLocalFile(new Path(&quot;hdfs://hadoophost:9000/pdf&quot;), new Path(&quot;/Users/xxx/Downloads/&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hadoop优点"><a href="#Hadoop优点" class="headerlink" title="Hadoop优点"></a>Hadoop优点</h2><ol><li>扩容能力：<ul><li>能可靠的存储和处理千兆（PB）字节数据</li><li>动态新增及卸载机器</li></ul></li><li>成本低：<ul><li>普通机器组成的服务器集群</li></ul></li><li>高效率：<ul><li>通过分发数据，Hadoop可以在数据所在的节点上并行处理</li></ul></li><li>可靠性：<ul><li>Hadoop能自动维护数据的多份副本，并且在任务失败后能自动的重新部署计算任务，恢复数据</li></ul></li><li>并行读写数据<ul><li>一块硬盘的读写性能 &lt; 多块硬盘的读写性能</li><li>1HDD = 75 MB/sec</li><li>1000HDD = 75GB/sec</li></ul></li></ol><h2 id="解决问题及适用场景"><a href="#解决问题及适用场景" class="headerlink" title="解决问题及适用场景"></a>解决问题及适用场景</h2><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>海量数据的存储（HDFS)<ul><li>可动态新增机器提升空间</li><li>自动备份，默认备份3份，在可配置文件中修改备份数</li></ul></li><li>海量数据的分析（MapReduce）<ul><li>分而治之，比如分析100G数据通过多台节点来并行分析处理</li></ul></li><li>资源管理调度（YARN）<ul><li>集群之间内存调度</li></ul></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>擅长日志分析</li><li>基于海量数据的在线应用</li><li>推荐系统</li><li>计算广告</li><li>复杂算法</li><li>网盘</li><li>搜索引擎</li></ol><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><!--1. 本地模式--><!--2. 伪分布模式--><!--    * 关闭防火墙--><!--    * 修改IP--><!--    * 修改hostname--><!--    * 设置ssh自动登录--><!--    * 安装jdk--><!--    * 安装hadoop--><!--3. 集群模式--><p><code>brew install hadoop</code> 即可安装</p><h3 id="hadoop配置"><a href="#hadoop配置" class="headerlink" title="hadoop配置"></a>hadoop配置</h3><ol><li><p><code>hadoop-env.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#第9行：导入JAVA_HOME</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.6.0_45</span><br><span class="line">mac系统可忽略</span><br></pre></td></tr></table></figure></li><li><p><code>core-site.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 配置HDFS的（namenode）的地址 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://itcast:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 配置hadoop运行时产生的文件的目录 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/cloud/hadoop-1.1.2/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>hdfs-site.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 配置HDFS的副本数量为1 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>mapred-site.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 配置MR的(jobtracker）的通信地址 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.job.tracker&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;itcast:9001&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>将hadoop加入到环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.6.0_45</span><br><span class="line">export HADOOP_HOME=/cloud/hadoop-1.1.2</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>去掉警告（在/etc/profile中添加）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME_WARN_SUPPRESS=1</span><br></pre></td></tr></table></figure></li></ol><h3 id="ssh免登录"><a href="#ssh免登录" class="headerlink" title="ssh免登录"></a>ssh免登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">生成ssh免登陆密钥</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">执行完这个命令后，会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</span><br><span class="line">将公钥拷贝到要免登陆的机器上</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">或</span><br><span class="line">ssh-copy-id -i localhost</span><br></pre></td></tr></table></figure><h2 id="初始化HDFS"><a href="#初始化HDFS" class="headerlink" title="初始化HDFS"></a>初始化HDFS</h2><h3 id="使用之前需要进行格式化分布式系统"><a href="#使用之前需要进行格式化分布式系统" class="headerlink" title="使用之前需要进行格式化分布式系统"></a>使用之前需要进行格式化分布式系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// hadoop namenode -format  已被下面的命令代替，也可使用</span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p>第一次需要格式化，以后不需要经常格式化，否则之前的数据就会丢失。</p><h3 id="启动HDFS和YARN"><a href="#启动HDFS和YARN" class="headerlink" title="启动HDFS和YARN"></a>启动HDFS和YARN</h3><p>ls  sbin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FederationStateStore    refresh-namenodes.sh    start-yarn.cmd        stop-secure-dns.sh</span><br><span class="line">distribute-exclude.sh    start-all.cmd        start-yarn.sh        stop-yarn.cmd</span><br><span class="line">hadoop-daemon.sh    start-all.sh        stop-all.cmd        stop-yarn.sh</span><br><span class="line">hadoop-daemons.sh    start-balancer.sh    stop-all.sh        workers.sh</span><br><span class="line">httpfs.sh        start-dfs.cmd        stop-balancer.sh    yarn-daemon.sh</span><br><span class="line">kms.sh            start-dfs.sh        stop-dfs.cmd        yarn-daemons.sh</span><br><span class="line">mr-jobhistory-daemon.sh    start-secure-dns.sh    stop-dfs.sh</span><br></pre></td></tr></table></figure><p>调用start-xx.sh 启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx:sbin xxx&amp; start-all.sh 这个脚本现在已经不赞成使用，以后可能要分别启动</span><br></pre></td></tr></table></figure></p><p>通过浏览器验证：</p><ol><li><a href="http://localhost:50070" target="_blank" rel="noopener">http://localhost:50070</a> (hdfs 管理界面）</li><li><a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a> (yarn 管理界面)</li></ol><p>调用stop-xx.sh 关闭。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx:sbin xxx&amp; stop-all.sh 这个脚本现在已经不赞成使用，以后可能要分别关闭</span><br></pre></td></tr></table></figure></p><h3 id="jps验证集群是否启动成功"><a href="#jps验证集群是否启动成功" class="headerlink" title="jps验证集群是否启动成功"></a>jps验证集群是否启动成功</h3><p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">34148 NameNode</span><br><span class="line">22933 Launcher</span><br><span class="line">34681 NodeManager</span><br><span class="line">34585 ResourceManager</span><br><span class="line">34394 SecondaryNameNode</span><br><span class="line">34253 DataNode</span><br><span class="line">34750 Jps</span><br></pre></td></tr></table></figure></p><ol><li><code>ResourceManager</code> 是 <code>yarn</code> 的管理者，<code>yarn</code> 负责资源调度，<code>NodeManager</code> 可以有很多个，负责存储数据。</li><li><code>NameNode</code> 是 <code>hdfs</code> 的管理者，<code>DataNode</code> 负责存储数据 ，<code>SecondaryNameNode</code> 协助 <code>NameNode</code> 完成元数据同步。</li></ol><h2 id="测试HDFS"><a href="#测试HDFS" class="headerlink" title="测试HDFS"></a>测试HDFS</h2><h3 id="上传文件到HDFS"><a href="#上传文件到HDFS" class="headerlink" title="上传文件到HDFS"></a>上传文件到HDFS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put 上传文件路径名 hdfs://本机地址:9000/上传文件夹名</span><br></pre></td></tr></table></figure><p>什么都没有输出，说明上传文件成功。</p><h3 id="从HDFS下载文件"><a href="#从HDFS下载文件" class="headerlink" title="从HDFS下载文件"></a>从HDFS下载文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -get hdfs://本机地址:9000/上传文件夹名 下载到本地路径</span><br></pre></td></tr></table></figure><p>什么都没有输出，说明下载文件成功。</p><h2 id="测试MR和YARN"><a href="#测试MR和YARN" class="headerlink" title="测试MR和YARN"></a>测试MR和YARN</h2><p>MR 架包</p><blockquote><p>cd hadoop路径/share/hadoop/mapreduce<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hadoop-mapreduce-client-app-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-common-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-core-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-hs-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-hs-plugins-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-jobclient-3.0.0-tests.jar</span><br><span class="line">hadoop-mapreduce-client-jobclient-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-nativetask-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-client-shuffle-3.0.0.jar</span><br><span class="line">hadoop-mapreduce-examples-3.0.0.jar</span><br><span class="line">jdiff</span><br><span class="line">lib-examples</span><br><span class="line">sources</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#什么是Hadoop?&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt; 什么是Hadoop&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#HDFS基本概念&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;HDFS基本概念&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Hadoop核心&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;Hadoop核心&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#HDFS的架构&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;HDFS的架构&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#JAVA环境&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;JAVA api 环境&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Hadoop优点&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;Hadoop优点&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#初始化HDFS&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;初始化HDFS&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#测试HDFS&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt; 测试HDFS&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#测试MR和YARN&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;  测试MR和YARN&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://github.com/songMW/stack.github.io/categories/Hadoop/"/>
    
      <category term="Hadoop for mac" scheme="https://github.com/songMW/stack.github.io/categories/Hadoop/Hadoop-for-mac/"/>
    
    
      <category term="Hadoop" scheme="https://github.com/songMW/stack.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>StaticLibraryAndFramework</title>
    <link href="https://github.com/songMW/stack.github.io/2018/02/28/Objective-C/StaticLibraryAndFramework/"/>
    <id>https://github.com/songMW/stack.github.io/2018/02/28/Objective-C/StaticLibraryAndFramework/</id>
    <published>2018-02-28T10:32:15.000Z</published>
    <updated>2018-07-30T11:16:13.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#静态库包含第三方静态库"> <font color="#0099ff" size="4px">静态库包含第三方静态库</font></a> </li><li><a href="#静态库包含第三方动态库"><font color="#0099ff" size="4px">静态库包含第三方动态库</font></a> </li><li><a href="#动态库包含第三方动态库"> <font color="#0099ff" size="4px">动态库包含第三方动态库</font></a> </li><li><a href="#动态库包含第三方静态库"><font color="#0099ff" size="4px">动态库包含第三方静态库</font></a></li></ul><a id="more"></a><h2 id="静态库包含第三方静态库"><a href="#静态库包含第三方静态库" class="headerlink" title="静态库包含第三方静态库"></a>静态库包含第三方静态库</h2><ol><li>制作好自己的静态库；</li><li>将第三方静态库的头文件添加到制作好的静态库中；.a不要添加进来，否则会编译不成功。</li><li>将自己制作好的.a和第三方.a文件同时添加到工程即可。</li><li>如果有资源文件也一并添加到工程中。</li></ol><h2 id="静态库包含第三方动态库"><a href="#静态库包含第三方动态库" class="headerlink" title="静态库包含第三方动态库"></a>静态库包含第三方动态库</h2><ol><li>制作好自己的静态库；</li><li>将第三方动态库添加进来即可。</li></ol><h2 id="动态库包含第三方动态库"><a href="#动态库包含第三方动态库" class="headerlink" title="动态库包含第三方动态库"></a>动态库包含第三方动态库</h2><ol><li>制作好自己的动态库；</li><li>将第三方动态库添加进来即可。</li></ol><h2 id="动态库包含第三方静态库"><a href="#动态库包含第三方静态库" class="headerlink" title="动态库包含第三方静态库"></a>动态库包含第三方静态库</h2><ol><li>制作好自己的动态库；</li><li>将第三方静态库添加进来。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#静态库包含第三方静态库&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;静态库包含第三方静态库&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#静态库包含第三方动态库&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;静态库包含第三方动态库&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#动态库包含第三方动态库&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;动态库包含第三方动态库&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#动态库包含第三方静态库&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;动态库包含第三方静态库&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pod搜索不到解决方法</title>
    <link href="https://github.com/songMW/stack.github.io/2018/01/04/Objective-C/CocoaPods/Pod%E6%90%9C%E7%B4%A2%E4%B8%8D%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/songMW/stack.github.io/2018/01/04/Objective-C/CocoaPods/Pod搜索不到解决方法/</id>
    <published>2018-01-04T09:49:38.000Z</published>
    <updated>2018-07-30T11:24:32.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#pod搜索不到"> <font color="#0099ff" size="4px">pod搜索不到</font></a>  <a id="more"></a></li></ul><h2 id="pod搜索不到"><a href="#pod搜索不到" class="headerlink" title="pod搜索不到"></a>pod搜索不到</h2><p>成功发布pod, 使用pod install可以成功添加自己发布的pod到工程,但是却用pod serach 搜索时报错: Unable to find a pod with name, author, summary, or description matching [podname]</p><ol><li><p>执行pod setup<br>终端输入：pod setup<br>会出现Setting up CocoaPods master repo，稍等几十秒，最底下会输出Setup completed。说明执行pod setup成功。</p></li><li><p>如果pod search操作还是搜索失败，如下：<br>终端输入：pod search [podname]<br>输出：Unable to find a pod with name, author, summary, or descriptionmatching [podname] 这时就需要继续下面的步骤了。<br>删除~/Library/Caches/CocoaPods目录下的search_index.json文件<br>pod setup成功后，依然不能pod search，是因为之前你执行pod search生成了search_index.json，此时需要删掉。</p></li><li><p>~/Library/Caches/CocoaPods/ 删除search_index.json再执行pod search<br>终端输入：pod search [podname] (不区分大小写)<br>输出：Creating search index for spec repo ‘master’.. Done!，稍等片刻······就会出现所有带有 [podname] 字段的类库。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pod搜索不到&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;pod搜索不到&lt;/font&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="CocoaPods" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/CocoaPods/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>URL到页面加载</title>
    <link href="https://github.com/songMW/stack.github.io/2017/11/26/Objective-C/Other/URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD/"/>
    <id>https://github.com/songMW/stack.github.io/2017/11/26/Objective-C/Other/URL到页面加载/</id>
    <published>2017-11-26T03:05:05.000Z</published>
    <updated>2018-07-30T11:28:02.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#引用`stackoverflow`"> <font color="#0099ff" size="4px">引用<code>stackoverflow</code></font></a> <a id="more"></a></li></ul><h2 id="引用stackoverflow"><a href="#引用stackoverflow" class="headerlink" title="引用stackoverflow"></a>引用<code>stackoverflow</code></h2><p><a href="http://stackoverflow.com/questions/2092527/what-happens-when-you-type-in-a-url-in-browser" target="_blank" rel="noopener">stackoverflow</a></p><ol><li><p>browser checks cache; if requested object is in cache and is fresh, skip to #9<br>浏览器检查缓存，若缓存中存储着要请求的内容，并且内容是最新的，直接跳转到第9步；</p></li><li><p>browser asks OS for server’s IP address<br>浏览器请求操作系统（OS）解析服务器的IP地址；</p></li><li><p>OS makes a DNS lookup and replies the IP address to the browser<br>操作系统做DNS解析，查找并返回IP地址给浏览器；</p></li><li><p>browser opens a TCP connection to server (this step is much more complex with HTTPS)<br>浏览器与服务器建立TCP连接（若使用的是https协议，连接过程会更加的复杂）；</p></li><li><p>browser sends the HTTP request through TCP connection<br>浏览器通过TCP连接发送http请求；</p></li><li><p>browser receives HTTP response and may close the TCP connection, or reuse it for another request<br>浏览器接收HTTP响应并且可以关闭TCP连接，或者将其重用于另一个请求；</p></li><li><p>browser checks if the response is a redirect (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx)<br>浏览器检查响应是否是重定向（3xx结果状态代码),授权请求(401),错误（4xx和5xx)等; 这些处理不同于正常响应(2xx）；</p></li><li><p>if cacheable, response is stored in cache<br>如果可高速缓存，则将响应存储在高速缓存中；</p></li><li><p>browser decodes response (e.g. if it’s gzipped)<br>浏览器解码响应（例如，如果是gzip压缩）；</p></li><li><p>browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?)<br>浏览器决定如何处理响应（例如，它是一个HTML页面，它是一个图像，它是一个声音剪辑?）；</p></li><li><p>browser renders response, or offers a download dialog for unrecognized types<br>浏览器呈现响应，或为无法识别的类型提供下载对话框。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#引用`stackoverflow`&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;引用&lt;code&gt;stackoverflow&lt;/code&gt;&lt;/font&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>图片类型</title>
    <link href="https://github.com/songMW/stack.github.io/2017/11/21/Objective-C/Image/ImageType/"/>
    <id>https://github.com/songMW/stack.github.io/2017/11/21/Objective-C/Image/ImageType/</id>
    <published>2017-11-21T04:03:34.000Z</published>
    <updated>2018-07-30T11:29:01.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#获取扩展名"> <font color="#0099ff" size="4px">获取扩展名</font></a> </li><li><a href="#取出图片数据的第一个字节"><font color="#0099ff" size="4px">取出图片数据的第一个字节</font></a> </li></ul><a id="more"></a><h2 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h2><!--more--><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *image = <span class="string">@"xxx.png"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *extension = image.pathExtension.lowercaseString;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,extension);</span><br></pre></td></tr></table></figure><p>只适用于可以获取到图片URL的时候</p><h2 id="取出图片数据的第一个字节"><a href="#取出图片数据的第一个字节" class="headerlink" title="取出图片数据的第一个字节"></a>取出图片数据的第一个字节</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle]pathForResource:<span class="string">@"414x736"</span> ofType:<span class="string">@"png"</span>];</span><br><span class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">uint8_t c;</span><br><span class="line">[data getBytes:&amp;c length: <span class="number">1</span>];</span><br><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xFF</span>:</span><br><span class="line">        <span class="keyword">return</span> SDImageFormatJPEG;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x89</span>:</span><br><span class="line">        <span class="keyword">return</span> SDImageFormatPNG;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x47</span>:</span><br><span class="line">        <span class="keyword">return</span> SDImageFormatGIF;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x49</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x4D</span>:</span><br><span class="line">        <span class="keyword">return</span> SDImageFormatTIFF;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x52</span>: &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.length &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="comment">//RIFF....WEBP</span></span><br><span class="line">            <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">12</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">            <span class="keyword">if</span> ([testString hasPrefix:<span class="string">@"RIFF"</span>] &amp;&amp; [testString hasSuffix:<span class="string">@"WEBP"</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> SDImageFormatWebP;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x00</span>: &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.length &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="comment">//....ftypheic ....ftypheix ....ftyphevc ....ftyphevx</span></span><br><span class="line">            <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">4</span>, <span class="number">8</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">            <span class="keyword">if</span> ([testString isEqualToString:<span class="string">@"ftypheic"</span>] ||</span><br><span class="line">                [testString isEqualToString:<span class="string">@"ftypheix"</span>] ||</span><br><span class="line">                [testString isEqualToString:<span class="string">@"ftyphevc"</span>] ||</span><br><span class="line">                [testString isEqualToString:<span class="string">@"ftyphevx"</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> SDImageFormatHEIC;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>类型参考SDWebImage。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#获取扩展名&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;获取扩展名&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#取出图片数据的第一个字节&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;取出图片数据的第一个字节&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Image/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>ImageI/O</title>
    <link href="https://github.com/songMW/stack.github.io/2017/11/08/Objective-C/Image/ImageI:O/"/>
    <id>https://github.com/songMW/stack.github.io/2017/11/08/Objective-C/Image/ImageI:O/</id>
    <published>2017-11-08T11:24:01.000Z</published>
    <updated>2018-07-30T11:30:22.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#使用ImageI/O基础"> <font color="#0099ff" size="4px">使用Image I/O 基础</font></a> </li><li><a href="#工程中使用ImageI/O"><font color="#0099ff" size="4px">工程中使用Image I/O</font></a> </li><li><a href="#实现图片渐进式"> <font color="#0099ff" size="4px">实现图片渐进式</font></a> </li><li><a href="#linux无密login"><font color="#0099ff" size="4px">linux 无密login</font></a> </li></ul><a id="more"></a><h2 id="使用ImageI-O基础"><a href="#使用ImageI-O基础" class="headerlink" title="使用ImageI/O基础"></a>使用ImageI/O基础</h2><p><code>ImageI/O framework</code>  提供从源图像 <code>CGImageSourceRef</code> 读取数据的不透明的数据类型并且写入图片数据到目的地 <code>CGImageDestinationRef</code>。它支持多种图像格式，包括标准的Web格式、高动态范围的图像和原始的摄像机数据。</p><ul><li>一个URL被认为是 <code>Core Foundation</code> 的数据类型 <code>CFURLRef : A reference to a CFURL object.</code>;</li><li><code>Core Foundation</code> 的对象 <code>CFDataRef</code> 和 <code>CFMutableDataRef</code>;</li><li>data consumer  对象<code>CGDataConsumerRef : An abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.</code> 和 数据提供对象 <code>CGDataProviderRef:</code> 抽象的数据读取任务，不用管理内存缓存;</li></ul><p>CGDataProviderRef：来自 <code>CFTypeRef</code> 并继承了所有 <code>Core Foundation</code> 的所有共有属性</p><blockquote><p>typedef struct CF_BRIDGED_TYPE(id) CGDataProvider *CGDataProviderRef;</p></blockquote><p>CFTypeRef ：<code>Core Foundation</code> 的基础类型，在多态函数中被用作类型和返回值，是一个通用的对象引用，充当其他<code>Core Foundation</code> 对象的占位符</p><blockquote><p>/<em> Base “type” of all “CF objects”, and polymorphic functions on them </em>/<br>typedef const CF_BRIDGED_TYPE(id) void * CFTypeRef;</p></blockquote><h2 id="工程中使用ImageI-O"><a href="#工程中使用ImageI-O" class="headerlink" title="工程中使用ImageI/O"></a>工程中使用ImageI/O</h2><blockquote><p> #import &lt;ImageIO/ImageIO.h&gt;</p></blockquote><h2 id="支持的图片类型"><a href="#支持的图片类型" class="headerlink" title="支持的图片类型"></a>支持的图片类型</h2><p><code>ImageI/O framework</code>  支持大多数常见的图片文件格式，比如： JPEG, JPEG2000, RAW, TIFF, BMP, and PNG</p><h3 id="获取最新的I-O支持的图片列表"><a href="#获取最新的I-O支持的图片列表" class="headerlink" title="获取最新的I/O支持的图片列表"></a>获取最新的I/O支持的图片列表</h3><ul><li><code>CGImageSourceCopyTypeIdentifiers</code> 返回一个 <code>UTIs</code> 数组是 <code>ImageI/O</code> 支持的图片来源</li><li><code>CGImageDestinationCopyTypeIdentifiers</code>  返回一个 <code>UTIs</code> 数组是 <code>ImageI/O</code> 支持的图片目标</li></ul><p>Getting and printing supported UTIs：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CFArrayRef mySourceTypes = CGImageSourceCopyTypeIdentifiers();</span><br><span class="line">CFShow(mySourceTypes);</span><br><span class="line">CFArrayRef myDestinationTypes = CGImageDestinationCopyTypeIdentifiers();</span><br><span class="line">CFShow(myDestinationTypes);</span><br></pre></td></tr></table></figure></p><p>UTLs 和 图片内容类型常量</p><table><thead><tr><th>Uniform type identifier</th><th style="text-align:right">Image content type constant</th></tr></thead><tbody><tr><td>public.image</td><td style="text-align:right">kUTTypeImage</td></tr><tr><td>public.png</td><td style="text-align:right">kUTTypePNG</td></tr><tr><td>public.jpeg</td><td style="text-align:right">kUTTypeJPEG</td></tr><tr><td>public.jpeg-2000 (OS X only)</td><td style="text-align:right">kUTTypeJPEG2000</td></tr><tr><td>public.tiff</td><td style="text-align:right">kUTTypeTIFF</td></tr><tr><td>com.apple.pict (OS X only)</td><td style="text-align:right">kUTTypePICT</td></tr><tr><td>com.compuserve.gif</td><td style="text-align:right">kUTTypeGIF</td></tr></tbody></table><h2 id="实现图片渐进式"><a href="#实现图片渐进式" class="headerlink" title="实现图片渐进式"></a>实现图片渐进式</h2><p>总结步骤：</p><ol><li>获取图片 NSData 数据；</li><li>调用 <code>CGImageSourceCreateIncremental</code> 方法创建增量图片源；</li><li>根据获取到的 NSData 创建 CFData 对象；</li><li>调用 <code>CGImageSourceUpdateData</code>  来更新图片。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.data = [NSMutableData data];</span><br><span class="line">    _loadFinished = NO;</span><br><span class="line">    _dataLength = 0;</span><br><span class="line"></span><br><span class="line">    _sourceRef = CGImageSourceCreateIncremental(NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)loadImageWithUrl</span><br><span class="line">&#123;</span><br><span class="line">    NSURL *url = [NSURL URLWithString:imageURL];</span><br><span class="line">    NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[[NSOperationQueue alloc]init]];</span><br><span class="line">    NSURLSessionDataTask *task = [session dataTaskWithURL:url];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data</span><br><span class="line">&#123;</span><br><span class="line">    [self.data appendData:data];</span><br><span class="line">    _loadFinished = NO;</span><br><span class="line">    if (_dataLength == dataTask.response.expectedContentLength) &#123;</span><br><span class="line">        _loadFinished = YES;</span><br><span class="line">    &#125;</span><br><span class="line">    _dataLength = dataTask.countOfBytesReceived;</span><br><span class="line">    [self showImage:self.data];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)showImage:(NSData *)data</span><br><span class="line">&#123;</span><br><span class="line">    CFDataRef dataRef = (__bridge CFDataRef)data;</span><br><span class="line">    CGImageSourceUpdateData(_sourceRef, dataRef, _loadFinished);</span><br><span class="line">    CGImageRef imageRef = CGImageSourceCreateImageAtIndex(_sourceRef, 0, NULL);</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        self.showImageView.image = [UIImage imageWithCGImage:imageRef];</span><br><span class="line">        CGImageRelease(imageRef);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>到此应该就可以看到效果。<br>注意点：</p><ul><li>使用<code>CGImageSourceCreateImageAtIndex</code> 创建  <code>CGImageRef</code> 对象，需要手动释放，否则内存会骤增；</li><li>需要在主线程中更新UI。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#使用ImageI/O基础&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;使用Image I/O 基础&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#工程中使用ImageI/O&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;工程中使用Image I/O&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#实现图片渐进式&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;实现图片渐进式&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#linux无密login&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;linux 无密login&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Image/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>ImageI/O编解码</title>
    <link href="https://github.com/songMW/stack.github.io/2017/10/09/Objective-C/Image/ImageI-O%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>https://github.com/songMW/stack.github.io/2017/10/09/Objective-C/Image/ImageI-O编解码/</id>
    <published>2017-10-09T10:56:07.000Z</published>
    <updated>2018-07-30T11:32:44.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#解码"> <font color="#0099ff" size="4px">解码</font></a> </li><li><a href="#编码"> <font color="#0099ff" size="4px">编码</font></a>  <a id="more"></a></li></ul><h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><p>将已经编码后的图像数据格式转化为可以被渲染的数据。<br>Image/IO的解码，支持了常见的图像格式，包括PNG、APNG、JPEG、GIF、BMP、TIFF <code>CGImageSourceCopyTypeIdentifiers</code> 可以获取支持的图像格式。<br>在iOS 11之后支持了HEIC（即使用了HEVC编码的HEIF格式）。</p><h2 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h2><p>静态图的解码步骤：</p><ol><li>创建CGImageSource；</li><li>读取图像格式元数据；</li><li>解码得到CGImage；</li><li>生成上层的UIImage，清理。<br>创建CGImageSource<br>CGImageSouce，表示的是一个待解码数据的输入。</li></ol><ul><li>CGImageSourceCreateWithData： 二进制数据（CGData）中创建ImageSource；</li><li>CGImageSourceCreateWithURL： 指定一个URL创建ImageSource；</li><li>CGImageSourceCreateWithDataProvider：从DataProvide中创建ImageSource，DataProvider提供了很多种输入，包括内存，文件，网络，流等。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">NSString *path = [[NSBundle mainBundle]pathForResource:@&quot;14444473,2560,1600&quot; ofType:@&quot;jpg&quot;];</span><br><span class="line">NSData *data = [NSData dataWithContentsOfFile:path];</span><br><span class="line"></span><br><span class="line">CFDataRef dataRef = (__bridge CFDataRef)data;</span><br><span class="line">// 创建CGImageSource</span><br><span class="line">CGImageSourceRef sourceRef = CGImageSourceCreateWithData(dataRef, NULL);</span><br><span class="line">NSAssert(sourceRef != nil, @&quot;sourceRef is nil&quot;);</span><br><span class="line"></span><br><span class="line">// 读取图像格式元数据</span><br><span class="line">NSDictionary *imageProperties = (__bridge NSDictionary *)CGImageSourceCopyPropertiesAtIndex(sourceRef, 0, NULL);</span><br><span class="line">NSLog(@&quot;获取属性列表：%@&quot;, imageProperties);</span><br><span class="line">NSUInteger width = [imageProperties[(__bridge NSString *)kCGImagePropertyPixelWidth] unsignedIntegerValue];</span><br><span class="line">NSLog(@&quot;图片宽：%@&quot;, @(width));</span><br><span class="line">NSUInteger height = [imageProperties[(__bridge NSString *)kCGImagePropertyPixelHeight] unsignedIntegerValue];</span><br><span class="line">NSLog(@&quot;图片高：%@&quot;, @(height));</span><br><span class="line">BOOL hasAlpha = [imageProperties[(__bridge NSString *)kCGImagePropertyHasAlpha] boolValue];</span><br><span class="line">NSLog(@&quot;是否含有Alpha通道：%@&quot;, @(hasAlpha));</span><br><span class="line">//图像格式：CGImageSourceGetType</span><br><span class="line">CFStringRef stringRef = CGImageSourceGetType(sourceRef);</span><br><span class="line">NSLog(@&quot;图像格式：%@&quot;, (__bridge NSString *)stringRef);</span><br><span class="line">//图像数量（动图）：CGImageSourceGetCount</span><br><span class="line">size_t t = CGImageSourceGetCount(sourceRef);</span><br><span class="line">NSLog(@&quot;图像数量：%zu&quot;, t);</span><br><span class="line"></span><br><span class="line">// 解码得到CGImage</span><br><span class="line">CGImageRef imageRef = CGImageSourceCreateImageAtIndex(sourceRef, 0, NULL);</span><br><span class="line"></span><br><span class="line">// 生成UIImage</span><br><span class="line">UIImage *image = [UIImage imageWithCGImage:imageRef];</span><br><span class="line">self.showImageView.image = image;</span><br><span class="line">CGImageRelease(imageRef);</span><br><span class="line">CFRelease(sourceRef);</span><br></pre></td></tr></table></figure></li></ul><p>注意点：</p><ol><li><code>CGImageSourceCreateImageAtIndex</code> 对于静态图 index 传0；</li><li><code>CGImageSourceCopyPropertiesAtIndex</code>  获取图片的元信息</li><li>释放</li></ol><h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><ol><li>创建CGImageSource ；</li><li>使用<code>CGImageSourceGetCount</code>获取到图片的帧数；</li><li>循环遍历每一帧，循环静态图2～4步骤<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NSURL *url = [NSURL URLWithString:dynamicImageURL];</span><br><span class="line">CGImageSourceRef sourcesRef = CGImageSourceCreateWithURL((__bridge_retained CFURLRef)url, NULL);</span><br><span class="line"></span><br><span class="line">// 获取图片帧数</span><br><span class="line">size_t count = CGImageSourceGetCount(sourcesRef);</span><br><span class="line">NSMutableArray&lt;UIImage *&gt; *images = [NSMutableArray array];</span><br><span class="line">double totalDuration = 0;</span><br><span class="line">for (size_t i = 0; i &lt; count; i++) &#123;</span><br><span class="line">NSDictionary *propertiesDict = (__bridge_transfer NSDictionary *)CGImageSourceCopyPropertiesAtIndex(sourcesRef, i, NULL);</span><br><span class="line">NSDictionary *gitPropertiesDict = propertiesDict[(NSString *)kCGImagePropertyGIFDictionary];</span><br><span class="line">double duration = [gitPropertiesDict[(NSString *)kCGImagePropertyGIFUnclampedDelayTime] doubleValue]; // GIF原始的帧持续时长，秒数</span><br><span class="line">totalDuration += duration;</span><br><span class="line">CGImageRef imageRef = CGImageSourceCreateImageAtIndex(sourcesRef, i, NULL);</span><br><span class="line">UIImage *image  = [UIImage imageWithCGImage:imageRef];</span><br><span class="line">[images addObject:image];</span><br><span class="line">CGImageRelease(imageRef);</span><br><span class="line">&#125;</span><br><span class="line">self.showImageView.image = [UIImage animatedImageWithImages:images duration:totalDuration];</span><br></pre></td></tr></table></figure></li></ol><p>UIImage这个animatedImages的接口，会根据传入的images的数量，平均分配传入的totalDuration的展示时长</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>指的就是将一个UIImage表示的图像，编码为对应图像格式的数据，输出NSData的过程。Image/IO提供的对应概念，叫做CGImageDestination，表示一个输出。之后的编码相关的操作与Destination对应。</p><h2 id="静态图-1"><a href="#静态图-1" class="headerlink" title="静态图"></a>静态图</h2><p>静态图编码步骤：</p><ol><li>创建CGImageDestination；</li><li>添加图像格式元数据（可选）和CGImage；</li><li>编码得到NSData。</li></ol><p>创建 CGImageDestination：</p><ol><li><code>CGImageDestinationCreateWithURL</code></li><li><code>CGImageDestinationCreateWithData</code></li><li><code>CGImageDestinationCreateWithDataConsumer</code></li></ol><p>添加图片到CGImageDestination</p><ol><li><code>CGImageDestinationAddImage</code></li><li><code>CGImageDestinationAddImageFromSource</code></li></ol><p>验证是否添加完成<br>使用<code>CGImageDestinationFinalize</code>验证图片是否添加完成，一旦完成后就不能向图片添加更多的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态图-1"><a href="#动态图-1" class="headerlink" title="动态图"></a>动态图</h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#解码&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;解码&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#编码&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;编码&lt;/font&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Image/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>图片压缩</title>
    <link href="https://github.com/songMW/stack.github.io/2017/10/02/Objective-C/Image/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    <id>https://github.com/songMW/stack.github.io/2017/10/02/Objective-C/Image/图片压缩/</id>
    <published>2017-10-02T08:31:06.000Z</published>
    <updated>2018-07-30T11:35:55.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#PNG/JPEG区别"> <font color="#0099ff" size="4px">PNG/JPEG区别</font></a> </li><li><a href="#为什么需要解压图片"><font color="#0099ff" size="4px">为什么需要解压图片</font></a> </li><li><a href="#图片压缩"><font color="#0099ff" size="4px">图片压缩</font></a> </li></ul><a id="more"></a><h2 id="PNG-JPEG区别"><a href="#PNG-JPEG区别" class="headerlink" title="PNG/JPEG区别"></a>PNG/JPEG区别</h2><ol><li>PNG 图片是无损压缩，并且支持 alpha 通道，</li><li>JPEG 图片是有损压缩，可以指定 0-100% 的压缩比；</li><li>苹果提供了两个函数用来生成 PNG 和 JPEG 图片：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// return image as PNG. May return nil if image has no CGImageRef or invalid bitmap format</span><br><span class="line">UIKIT_EXTERN NSData * __nullable UIImagePNGRepresentation(UIImage * __nonnull image);</span><br><span class="line"></span><br><span class="line">// return image as JPEG. May return nil if image has no CGImageRef or invalid bitmap format. compression is 0(most)..1(least)</span><br><span class="line">UIKIT_EXTERN NSData * __nullable UIImageJPEGRepresentation(UIImage * __nonnull image, CGFloat compressionQuality);</span><br></pre></td></tr></table></figure><h2 id="为什么需要解压图片"><a href="#为什么需要解压图片" class="headerlink" title="为什么需要解压图片"></a>为什么需要解压图片</h2><p>图片的解压缩需要消耗大量的 CPU 时间，为什么需要将图片解压后才能展示到屏幕上呢？这里引入一个概念<a href="https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_images/dq_images.html#//apple_ref/doc/uid/TP30001066-CH212-SW3" target="_blank" rel="noopener">位图</a></p><blockquote><p>A bitmap image (or sampled image) is an array of pixels (or samples). Each pixel represents a single point in the image. JPEG, TIFF, and PNG graphics files are examples of bitmap images.<br> 位图就是一个数组，数组中每个元素代表图片中的一个点。</p></blockquote><h3 id="获取图片的原始数据"><a href="#获取图片的原始数据" class="headerlink" title="获取图片的原始数据"></a>获取图片的原始数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFDataRef ref = CGDataProviderCopyData(CGImageGetDataProvider(_image.CGImage));</span><br></pre></td></tr></table></figure><h3 id="计算图片所占内存"><a href="#计算图片所占内存" class="headerlink" title="计算图片所占内存"></a>计算图片所占内存</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_image = [UIImage imageNamed:@&quot;320x480&quot;];</span><br><span class="line">CGFloat cgImageBytesPerRow = CGImageGetBytesPerRow(_image.CGImage); // 2560</span><br><span class="line">CGFloat cgImageHeight = CGImageGetHeight(_image.CGImage); // 960</span><br><span class="line">NSUInteger size  = cgImageHeight * cgImageBytesPerRow;</span><br><span class="line">NSLog(@&quot;size:%lu&quot;,(unsigned long)size); // 输出 2457600 bytes</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CFDataRef ref = CGDataProviderCopyData(CGImageGetDataProvider(_image.CGImage));</span><br><span class="line">NSLog(@&quot;%@&quot;, ref); // 输出 2457600 bytes</span><br></pre></td></tr></table></figure><p>打印可以看出一张320*480的图片加载并成功展示到页面所占用的内存达到 2457600 / 1024 / 1024 大约有2.34375M。如果有很多张这样的图片，内存完全不够用。</p><p>这里位图和二进制不是一个概念。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><h3 id="等比压缩-常用"><a href="#等比压缩-常用" class="headerlink" title="等比压缩 常用"></a>等比压缩 常用</h3><p>使用场景：后台返回固定图片尺寸用于支持iOS和android，比如返回1920x1080大小的图片，如不压缩在iPhone的所有尺寸展示：</p><ol><li>全屏展示：图片展示不全；</li><li>指定其他大小尺寸展示：图片会失真</li></ol><p>此时需要按照等比压缩的方式来压缩图片：假定后台服务器返回图片的尺寸是固定的。<br>在程序中写定图片的宽和高：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define image_width 1080</span><br><span class="line">#define image_height 1920</span><br></pre></td></tr></table></figure></p><p>按需求来设定图片展示大小，假设想要在width * height 大小的地方展示图片，如何计算压缩后图片的大小？</p><ol><li><p>定宽<br>图片宽：width<br>图片高：width * image_height / image_width</p></li><li><p>定高<br>图片宽：height * image_width / image_height<br>图片高：height<br>计算完成后在根据压缩后图片的大小来调整展示view的大小。<br>如果服务器返回的图片尺寸不是固定的也可以进行压缩，只是每次计算之前先要获取到图片，拿到图片的大小，过程一样。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#PNG/JPEG区别&quot;&gt; &lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;PNG/JPEG区别&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#为什么需要解压图片&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;为什么需要解压图片&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#图片压缩&quot;&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;4px&quot;&gt;图片压缩&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Image/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>堆和栈</title>
    <link href="https://github.com/songMW/stack.github.io/2017/09/15/Objective-C/Other/%E5%A0%86%E5%92%8C%E6%A0%88/"/>
    <id>https://github.com/songMW/stack.github.io/2017/09/15/Objective-C/Other/堆和栈/</id>
    <published>2017-09-15T10:09:25.000Z</published>
    <updated>2018-03-01T07:23:57.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈和堆存储在哪"><a href="#栈和堆存储在哪" class="headerlink" title="栈和堆存储在哪?"></a>栈和堆存储在哪?</h2><p>他们都存储在电脑的 RAM(Random Access Memory) 中</p><h2 id="栈和堆中都保存的是什么"><a href="#栈和堆中都保存的是什么" class="headerlink" title="栈和堆中都保存的是什么?"></a>栈和堆中都保存的是什么?</h2><ol><li>栈 —&gt;编译器在需要的时候分配，在不需要的时候自动清除变量的存储区，通常是局部变量，函数参数等；</li><li>堆 —&gt;由 new 分配的操作块，一个 new 对应一个 delete</li><li>自由存储区 —&gt;由 malloc 分配的内存块</li><li>全局/静态存储区 —&gt;全局变量和静态变量被分配到同一块内存中</li><li>常量存储区 —&gt;这时一块比较特殊的存储区，存放常量，不能修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void f() &#123;</span><br><span class="line">    int *p = new int[5]；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>看到 new 说明分配了一块堆内存，那么指针 p 是什么? p 分配的是一块栈内存，这句意思是在栈内存中存放一个指向一块堆内容的指针 p。程序先会确定在堆中分配内存的大小，然后调用 operator new 分配内存，让后返回这块内存的首地址，放入栈中。</p><h2 id="栈和堆区别是什么"><a href="#栈和堆区别是什么" class="headerlink" title="栈和堆区别是什么?"></a>栈和堆区别是什么?</h2><ol><li>管理方式不同：对于栈来说，是由编译器自动管理，无需我们手动控制；对于堆来说，释放工作由程序员控制，容易产生 memory leak；</li><li>空间大小不同:栈空间大小是1M，而在32位系统下，堆内存空间可以达到4G；</li><li>产生碎片不同:对于堆来说，频繁的 new/delete 势必会造成内存空间的不连续，而从造成大量碎片，使程序效率降低；对栈来说，不会产生碎片问题，栈是先进后出的队列不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的栈内容已经弹出；</li><li>生长方式不同:对于堆来说，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来说，它的生长方向是向下的，是向着内存地址减少的方向增长；</li><li>分配方式不同:堆是动态分配，没有静态分配的堆；栈有2中分配方式:静态分配和动态分配，静态分配是编译器完成的，比如局部变量的分配；动态分配由 alloc 函数进行分配，由编译器进行释放；</li><li>分配效率不同:栈是机器系统提供的数据结构，计算机会在底层对栈提供支持:分配专门的寄存器存放栈地址，压栈出栈都有专门的指令执行，这就决定栈的效率比较高；堆是 C/C++函数提供的，例如分配一块内存，库函数会按照一定的算法在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间(可能由于内存碎片太多)，就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;栈和堆存储在哪&quot;&gt;&lt;a href=&quot;#栈和堆存储在哪&quot; class=&quot;headerlink&quot; title=&quot;栈和堆存储在哪?&quot;&gt;&lt;/a&gt;栈和堆存储在哪?&lt;/h2&gt;&lt;p&gt;他们都存储在电脑的 RAM(Random Access Memory) 中&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="堆和栈" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/%E5%A0%86%E5%92%8C%E6%A0%88/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>MPMoviePlayerViewController</title>
    <link href="https://github.com/songMW/stack.github.io/2017/08/22/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerViewController/"/>
    <id>https://github.com/songMW/stack.github.io/2017/08/22/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerViewController/</id>
    <published>2017-08-22T12:34:53.000Z</published>
    <updated>2018-05-10T07:20:56.399Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴上<a href="https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller" target="_blank" rel="noopener">官方文档</a></p><p>先看下头文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@interface MPMoviePlayerViewController : UIViewController</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithContentURL:(NSURL *)contentURL NS_DESIGNATED_INITIALIZER;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, readonly) MPMoviePlayerController *moviePlayer;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface UIViewController (MPMoviePlayerViewController)</span><br><span class="line"></span><br><span class="line">- (void)presentMoviePlayerViewControllerAnimated:(MPMoviePlayerViewController *)moviePlayerViewController;</span><br><span class="line">- (void)dismissMoviePlayerViewControllerAnimated;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><ul><li>MPMoviePlayerViewController 继承 UIViewController;</li><li>API很少, 主要是 moviePlayer 这个属性, 是对 MPMoviePlayerController 的一层封装;</li><li>当然也拥有 MPMoviePlayerController 的所有功能;</li><li>使用简单, 点击Done按钮会自动退出, 有进度条, 快进, 快退, 播放按钮.</li><li>可以去自定义添加控件到播放页面, 不建议这么做, 可以直接使用 MPMoviePlayerController</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MPMoviePlayerViewController *mpMovieController = [[MPMoviePlayerViewController alloc]initWithContentURL:[NSURL fileURLWithPath:videoPath]];</span><br><span class="line">[vc presentViewController:mpMovieController animated:YES completion:nil];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先贴上&lt;a href=&quot;https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="AVFoundation" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/AVFoundation/"/>
    
      <category term="MoviePlayer" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/AVFoundation/MoviePlayer/"/>
    
      <category term="MPMoviePlayerViewController" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerViewController/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>DS_Store</title>
    <link href="https://github.com/songMW/stack.github.io/2017/08/16/Objective-C/Other/DS-Store/"/>
    <id>https://github.com/songMW/stack.github.io/2017/08/16/Objective-C/Other/DS-Store/</id>
    <published>2017-08-16T09:43:06.000Z</published>
    <updated>2018-03-01T07:24:22.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去"><a href="#DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去" class="headerlink" title=".DS_Store 是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去."></a>.DS_Store 是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去.</h2><ul><li>Mac 下隐藏显示.DS_Store 方法:<br>显示Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles -bool true</li><li>显示Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles YES</li><li>隐藏Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles -bool false</li><li>隐藏Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles NO</li><li>重启Finder：鼠标单击窗口左上角的苹果标志–&gt;强制退出–&gt;Finder–&gt;重新启动</li></ul><h2 id="设置忽略-DS-Store"><a href="#设置忽略-DS-Store" class="headerlink" title="设置忽略.DS_Store"></a>设置忽略.DS_Store</h2><ul><li>进入:/Users/xx/.subversion打开 config</li><li>搜索global-ignores 找到global-ignores = <em>.o </em>.lo <em>.la </em>.al .libs <em>.so </em>.so.[0-9]<em> </em>.a <em>.pyc </em>.pyo <em>.rej </em>~ #<em># .#</em> .*.swp .DS_Store  取消注解.</li></ul><h2 id="设置忽略-xcuserstate-确保global-ignores已经取消注解"><a href="#设置忽略-xcuserstate-确保global-ignores已经取消注解" class="headerlink" title="设置忽略.xcuserstate 确保global-ignores已经取消注解"></a>设置忽略.xcuserstate 确保global-ignores已经取消注解</h2><ul><li>进入:/Users/xx/.subversion打开 config</li><li>搜索enable-auto-props 取消注释</li><li>搜索[auto-props]在下面添加:<br><em>.mode</em>=svn:mime-type=text/X-xcode<br><em>.pbxuser=svn:mime-type=text/X-xcode</em>.perspective<em>=svn:mime-type=text/X-xcode</em>.pbxproj=svn:mime-type=text/X-xcode</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去&quot;&gt;&lt;a href=&quot;#DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="DS_Store" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/DS-Store/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>XcodeCommand</title>
    <link href="https://github.com/songMW/stack.github.io/2017/08/15/Objective-C/Other/XcodeCommand/"/>
    <id>https://github.com/songMW/stack.github.io/2017/08/15/Objective-C/Other/XcodeCommand/</id>
    <published>2017-08-15T10:09:25.000Z</published>
    <updated>2018-02-05T07:31:19.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PROJECT-DIR"><a href="#PROJECT-DIR" class="headerlink" title="${PROJECT_DIR}"></a>${PROJECT_DIR}</h2><blockquote><p>${PROJECT_DIR} = /path/AppName<br>/path ：当前工程所在路径<br>AppName：打开Xcode工程后显示的工程名称</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PROJECT-DIR&quot;&gt;&lt;a href=&quot;#PROJECT-DIR&quot; class=&quot;headerlink&quot; title=&quot;${PROJECT_DIR}&quot;&gt;&lt;/a&gt;${PROJECT_DIR}&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;${PROJECT_DIR} 
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="XcodeCommand" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/XcodeCommand/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>MPMoviePlayerController</title>
    <link href="https://github.com/songMW/stack.github.io/2017/07/30/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerController/"/>
    <id>https://github.com/songMW/stack.github.io/2017/07/30/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerController/</id>
    <published>2017-07-30T03:38:30.000Z</published>
    <updated>2018-05-10T07:21:03.692Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴上<a href="https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller" target="_blank" rel="noopener">官方文档</a></p><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.moviePlayerController.view];</span><br><span class="line">    [self.moviePlayerController.view makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.top.left.bottom.right.equalTo(self.view);</span><br><span class="line">    &#125;];</span><br><span class="line">    [self.moviePlayerController prepareToPlay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (MPMoviePlayerController *)moviePlayerController</span><br><span class="line">&#123;</span><br><span class="line">    if (!_moviePlayerController) &#123;</span><br><span class="line">        _moviePlayerController = [[MPMoviePlayerController alloc]init];</span><br><span class="line">        _moviePlayerController.fullscreen = NO;</span><br><span class="line">        _moviePlayerController.controlStyle = MPMovieControlStyleEmbedded;</span><br><span class="line">        _moviePlayerController.scalingMode = MPMovieScalingModeAspectFit;</span><br><span class="line">        [_moviePlayerController.view setTranslatesAutoresizingMaskIntoConstraints:NO];</span><br><span class="line">    &#125;</span><br><span class="line">    return _moviePlayerController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>_moviePlayerController.view 一定要添加到父视图上, 要不只有声音没有图片</li><li>MPMoviePlayerController 继承 NSObject <mpmediaplayback></mpmediaplayback></li><li><mpmediaplayback> 播放, 暂停, 停止, 准备播放的API</mpmediaplayback></li><li>视图刚呈现时底部显示: 暂停 进度条 全屏按钮</li><li>点击底部全屏按钮后会在顶部呈现: Done 进度条 退出全屏按钮</li></ul><h2 id="2-顶部-Done-和-退出全屏按钮的监测"><a href="#2-顶部-Done-和-退出全屏按钮的监测" class="headerlink" title="2. 顶部 Done 和 退出全屏按钮的监测"></a>2. 顶部 Done 和 退出全屏按钮的监测</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(doneButtonClick:) name:MPMoviePlayerWillExitFullscreenNotification object:nil];</span><br><span class="line"></span><br><span class="line">- (void)doneButtonClick:(NSNotification *)center</span><br><span class="line">&#123;</span><br><span class="line">    if (self.moviePlayerController.playbackState == MPMoviePlaybackStateStopped) &#123;</span><br><span class="line">        //说明是点击Done按钮</span><br><span class="line">        [self dismissViewControllerAnimated:YES completion:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    else if (self.moviePlayerController.playbackState == MPMoviePlaybackStatePlaying)&#123;</span><br><span class="line">        //说明点击了右上角退出全屏按钮</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册 <code>MPMoviePlayerWillExitFullscreenNotification</code> 这个通知, 不管是点击Done还是退出全屏按钮都会接受到通知, 在通知的回调方法中可以根据 <code>playbackState</code> 这个属性来判断是点击那个按钮.</li><li>点击Done按钮时会暂停播放</li><li>点击退出全屏按钮则不会暂停播放</li></ul><h2 id="3-监听视频播放结束"><a href="#3-监听视频播放结束" class="headerlink" title="3. 监听视频播放结束"></a>3. 监听视频播放结束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(videoEndPlay:) name:MPMoviePlayerPlaybackDidFinishNotification object:nil];</span><br><span class="line"></span><br><span class="line">- (void)videoEndPlay:(NSNotification *)sender</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;播放结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自动播放完成后会调用</li><li>用户退出播放时会调用</li></ul><h2 id="4-监听当前视频播放状态"><a href="#4-监听当前视频播放状态" class="headerlink" title="4. 监听当前视频播放状态"></a>4. 监听当前视频播放状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(videoLoadStateDidChange:) name:MPMoviePlayerLoadStateDidChangeNotification object:nil];</span><br><span class="line">- (void)videoLoadStateDidChange:(NSNotification *)sender</span><br><span class="line">&#123;</span><br><span class="line">    // Returns the network load state of the movie player</span><br><span class="line">    switch (self.moviePlayerController.loadState) &#123;</span><br><span class="line">        case MPMovieLoadStatePlayable:</span><br><span class="line">            NSLog(@&quot;加载完成,可以播放&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMovieLoadStatePlaythroughOK:</span><br><span class="line">            NSLog(@&quot;缓冲完成，可以连续播放&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMovieLoadStateStalled:</span><br><span class="line">            NSLog(@&quot;缓冲中&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMovieLoadStateUnknown:</span><br><span class="line">            NSLog(@&quot;未知状态&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-监听当前视频-Playback-拖动进度条-播放-暂停-开启全屏-退出全屏也需要注册这个通知"><a href="#5-监听当前视频-Playback-拖动进度条-播放-暂停-开启全屏-退出全屏也需要注册这个通知" class="headerlink" title="5. 监听当前视频 Playback 拖动进度条, 播放, 暂停, 开启全屏, 退出全屏也需要注册这个通知"></a>5. 监听当前视频 Playback 拖动进度条, 播放, 暂停, 开启全屏, 退出全屏也需要注册这个通知</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(videoPlaybackDidChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:nil];</span><br><span class="line"></span><br><span class="line">- (void)videoPlaybackDidChange:(NSNotification *)center</span><br><span class="line">&#123;</span><br><span class="line">    switch (self.moviePlayerController.playbackState) &#123;</span><br><span class="line">        case MPMoviePlaybackStateStopped:</span><br><span class="line">            NSLog(@&quot;停止播放&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMoviePlaybackStatePlaying:</span><br><span class="line">            NSLog(@&quot;正在播放&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMoviePlaybackStatePaused:</span><br><span class="line">            NSLog(@&quot;暂停播放&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMoviePlaybackStateInterrupted:</span><br><span class="line">            NSLog(@&quot;中断播放&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMoviePlaybackStateSeekingForward:</span><br><span class="line">            NSLog(@&quot;快进&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MPMoviePlaybackStateSeekingBackward:</span><br><span class="line">            NSLog(@&quot;快退&quot;);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-上一首-下一首"><a href="#7-上一首-下一首" class="headerlink" title="7. 上一首, 下一首"></a>7. 上一首, 下一首</h2><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先贴上&lt;a href=&quot;https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="AVFoundation" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/AVFoundation/"/>
    
      <category term="MoviePlayer" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/AVFoundation/MoviePlayer/"/>
    
      <category term="MPMoviePlayerController" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerController/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>copy</title>
    <link href="https://github.com/songMW/stack.github.io/2017/07/03/Objective-C/MemoryManager/Copy/"/>
    <id>https://github.com/songMW/stack.github.io/2017/07/03/Objective-C/MemoryManager/Copy/</id>
    <published>2017-07-03T06:54:15.000Z</published>
    <updated>2018-01-25T07:35:12.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="strong"><a href="#strong" class="headerlink" title="strong"></a><code>strong</code></h2><p><code>@property (nonatomic,strong)NSString *name;</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)test1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"iOS"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// str value: iOS , str address: 0x17026fb00</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.name = name;</span><br><span class="line">    <span class="comment">// self.name value: iOS , self.name address: 0x17026fb00</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.name value: %@ , self.name address: %p"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.name);</span><br><span class="line">    </span><br><span class="line">    [str appendString:<span class="string">@" Source Probe"</span>];</span><br><span class="line">    <span class="comment">// self.name value: iOS Source Probe , self.name address: 0x17026fb00</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.name value: %@ , self.name address: %p"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对 <code>strong</code> 类型的变量进行赋值时，<code>name</code> 指向 <code>str</code> 的地址，<code>name</code> 的值会随着  <code>str</code> 的变化而变化。</p><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a><code>copy</code></h2><p><code>@property (nonatomic,copy)NSString *cy_name;</code></p><h3 id="指向不可变类型"><a href="#指向不可变类型" class="headerlink" title="指向不可变类型"></a>指向不可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)test2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"iOS"</span>;</span><br><span class="line">    <span class="comment">// str value: iOS , str address: 0x17026fb80</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.cy_name = str;</span><br><span class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0x17026fb80</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</span><br><span class="line"></span><br><span class="line">    str = <span class="string">@" Source Probe"</span>;</span><br><span class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0x17026fb80</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 <code>copy</code> 类型的变量进行赋值时，<code>cy_name</code> 指向  <code>str</code>  的地址，<code>cy_name</code> 的值不会随着  <code>str</code> 的变化而变化。</p><h3 id="指向可变类型"><a href="#指向可变类型" class="headerlink" title="指向可变类型"></a>指向可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)test3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"iOS"</span>];</span><br><span class="line">    <span class="comment">// str value: iOS , str address: 0x170270300</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.cy_name = str;</span><br><span class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0xa00000000534f693</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</span><br><span class="line"></span><br><span class="line">    [str appendString:<span class="string">@" Source Probe"</span>];</span><br><span class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0xa00000000534f693</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 <code>copy</code> 类型的变量进行赋值时，<code>cy_name</code> 指向新的地址，<code>cy_name</code> 的值不会随着  <code>str</code> 的变化而变化。</p><p><code>copy</code>  针对可变类型的变量时，地址会发生变化。</p><h2 id="mutableCopy"><a href="#mutableCopy" class="headerlink" title="mutableCopy"></a><code>mutableCopy</code></h2><h3 id="指向不可变类型-1"><a href="#指向不可变类型-1" class="headerlink" title="指向不可变类型"></a>指向不可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) test7</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"iOS"</span>;</span><br><span class="line">    <span class="comment">// str value: iOS , str address: 0x170263c00</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *str_b = [str mutableCopy];</span><br><span class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</span><br><span class="line"></span><br><span class="line">    str = <span class="string">@"Android"</span>;</span><br><span class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对一个不可变字符串进行深拷贝时，地址发生变化，值不会在改变。</p><h3 id="指向可变类型-1"><a href="#指向可变类型-1" class="headerlink" title="指向可变类型"></a>指向可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) test6</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"iOS"</span>];</span><br><span class="line">    <span class="comment">// str value: iOS , str address: 0x170263c00</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *str_b = [str mutableCopy];</span><br><span class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</span><br><span class="line"></span><br><span class="line">    [str appendString:<span class="string">@" Source Probe"</span>];</span><br><span class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对一个可变字符串进行深拷贝时，地址发生变化，值不会在改变。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于系统的非容器类对象，如果对一不可变对象 <code>NSString</code> 复制，<code>copy</code> 是指针复制(浅拷贝) ，<code>mutableCopy</code> 是对象复制(深拷贝)； 如果是对可变对象 <code>NSMutableString</code> 复制，<code>copy</code> 和 <code>mutableCopy</code> 都是深拷贝，但是 <code>copy</code>  返回的对象是不可变的；</li><li>对于系统的容器类对象，对不可变对象 <code>NSArray</code> 进行复制，<code>copy</code> 是指针复制(浅拷贝)，<code>mutableCopy</code> 是对象复制(深拷贝)， 但是不管是 <code>copy</code> 还是 <code>mutableCopy</code>，返回的容器内对象都是指针复制(浅拷贝)；</li><li>对于系统的容器类对象，对可变对象 <code>NSMutableArray</code> 进行复制时，<code>copy</code>  和 <code>mutableCopy</code> 都是对象复制(深拷贝)，但是不管是 <code>copy</code> 还是 <code>mutableCopy</code>，返回的容器内对象都是指针复制(浅拷贝)。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;strong&quot;&gt;&lt;a href=&quot;#strong&quot; class=&quot;headerlink&quot; title=&quot;strong&quot;&gt;&lt;/a&gt;&lt;code&gt;strong&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;@property (nonatomic,strong)NSStrin
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="copy" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/copy/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView的坑</title>
    <link href="https://github.com/songMW/stack.github.io/2017/06/18/Objective-C/WKWebView/"/>
    <id>https://github.com/songMW/stack.github.io/2017/06/18/Objective-C/WKWebView/</id>
    <published>2017-06-18T03:05:05.000Z</published>
    <updated>2018-05-10T07:23:05.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-iOS-8-系统下遇到的问题"><a href="#一-iOS-8-系统下遇到的问题" class="headerlink" title="一: iOS 8 系统下遇到的问题"></a>一: iOS 8 系统下遇到的问题</h2><ol><li>实例化WKWebView后如果不将其添加到父类上, 则其代理方法不回调; iOS 9及以上版本不存在此问题. 大坑~</li></ol><h2 id="二-webView-自适应宽度"><a href="#二-webView-自适应宽度" class="headerlink" title="二: webView 自适应宽度"></a>二: webView 自适应宽度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class="line">&#123;</span><br><span class="line">    // webView 自适应宽度</span><br><span class="line">    NSString *meta = [NSString stringWithFormat:@&quot;document.getElementsByName(\&quot;viewport\&quot;)[0].content = \&quot;width=%f,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\&quot;&quot;, webView.frame.size.width];</span><br><span class="line">    [webView stringByEvaluatingJavaScriptFromString:meta];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-iOS-8-系统下遇到的问题&quot;&gt;&lt;a href=&quot;#一-iOS-8-系统下遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;一: iOS 8 系统下遇到的问题&quot;&gt;&lt;/a&gt;一: iOS 8 系统下遇到的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;实例化WKW
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="WKWebView" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/WKWebView/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>KVO</title>
    <link href="https://github.com/songMW/stack.github.io/2017/06/10/Objective-C/KV_X/KVO/"/>
    <id>https://github.com/songMW/stack.github.io/2017/06/10/Objective-C/KV_X/KVO/</id>
    <published>2017-06-10T02:15:23.000Z</published>
    <updated>2018-05-22T07:34:50.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是KVO"><a href="#什么是KVO" class="headerlink" title="什么是KVO?"></a><em>什么是KVO?</em></h2><p><code>Key-value observing is a mechanism that allows objects to be notified of changes to specified properties of other objects.</code><br><strong> KVO是一种机制，被观察对象指定的属性发生变化时，观察者可以得到通知。</strong><br><code>Important: In order to understand key-value observing, you must first understand key-value coding.</code></p><h3 id="注册观察者"><a href="#注册观察者" class="headerlink" title="注册观察者"></a>注册观察者</h3><ol><li>addObserver ：注册观察者</li><li>forKeyPath ：需要观察对象的属性</li><li>NSKeyValueObservingOptions ：当观察对象的属性值发生变化时，会发送一个通知包含 <code>NSKeyValueChangeNewKey and NSKeyValueChangeOldKey</code></li><li>content ：用于标识KVO，移除特定的KVO</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AdHubKVOModel *testModel = [[AdHubKVOModel alloc]init];</span><br><span class="line">[testModel addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"keyPath"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><h3 id="触发回调"><a href="#触发回调" class="headerlink" title="触发回调"></a>触发回调</h3><p>设置 testModel.keyPath = @”20”;时会触发回调通知<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context</span><br><span class="line">&#123;</span><br><span class="line">    // keyPath ：观察对象的属性</span><br><span class="line">    // object  ：被观察的对象</span><br><span class="line">    // change  ：包含 NSKeyValueChangeNewKey and NSKeyValueChangeOldKey</span><br><span class="line">                change[NSKeyValueChangeNewKey] / change[NSKeyValueChangeOldKey]</span><br><span class="line">    // context ：用于标识KVO，移除特定的KVO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自动通知"><a href="#自动通知" class="headerlink" title="自动通知"></a>自动通知</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Call the accessor method.</span></span><br><span class="line">[account setName:<span class="string">@"Savings"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use setValue:forKey:.</span></span><br><span class="line">[account setValue:<span class="string">@"Savings"</span> forKey:<span class="string">@"name"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use a key path, where 'account' is a kvc-compliant property of 'document'.</span></span><br><span class="line">[document setValue: <span class="string">@"Savings"</span> forKeyPath:<span class="string">@"account.name"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use mutableArrayValueForKey: to retrieve a relationship proxy object.</span></span><br><span class="line">Transaction *newTransaction = &lt;<span class="meta">#Create a new transaction for the account#&gt;;</span></span><br><span class="line"><span class="built_in">NSMutableArray</span> *transactions = [account mutableArrayValueForKey:<span class="string">@"transactions"</span>];</span><br><span class="line">[transactions addObject:newTransaction];</span><br></pre></td></tr></table></figure><h3 id="手动通知"><a href="#手动通知" class="headerlink" title="手动通知"></a>手动通知</h3><p>需要重写<code>NSKeyValueObserving.h</code>中的方法, 判断当观察的 <code>key</code> 是 <code>balance</code> 时，就将自动通知关闭，其余的情况还是根据父类来进行判断<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForKey:(<span class="built_in">NSString</span> *)theKey </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> automatic = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> ([theKey isEqualToString:<span class="string">@"balance"</span>]) &#123;</span><br><span class="line">        automatic = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        automatic = [<span class="keyword">super</span> automaticallyNotifiesObserversForKey:theKey];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> automatic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> 返回YES时会自动调用 <code>-willChangeValueForKey:/-didChangeValueForKey:</code> 这两个方法；</strong><br><strong> 返回NO时需要手动设置 <code>-willChangeValueForKey:/-didChangeValueForKey:</code> 这两个方法。</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (theBalance != _balance) &#123;</span><br><span class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"balance"</span>];</span><br><span class="line">        _balance = theBalance;</span><br><span class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"balance"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同时设置多个属性值"><a href="#同时设置多个属性值" class="headerlink" title="同时设置多个属性值"></a>同时设置多个属性值</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"balance"</span>];</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"itemChanged"</span>];</span><br><span class="line">    _balance = theBalance;</span><br><span class="line">    _itemChanged = _itemChanged+<span class="number">1</span>;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"itemChanged"</span>];</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"balance"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除KVO"><a href="#移除KVO" class="headerlink" title="移除KVO"></a>移除KVO</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[observeredObject removeObserver:observer forKeyPath:keyPath];</span><br></pre></td></tr></table></figure><p><strong>再次移除同一对象的同一属性会crash</strong><br><code>Terminating app due to uncaught exception &#39;NSRangeException&#39;, reason: &#39;Cannot remove an observer &lt;xxxxx 0x7f9310e0bec0&gt; for the key path &quot;keyPath&quot; from &lt;xxxx 0x600000648c70&gt; because it is not registered as an observer.</code></p><p><strong> 移除KVO时，注意：<code>forKeyPath</code>  传入 </strong></p><ul><li>不能为空</li><li>不能是观察对象中不存在的属性</li><li>不能是未被注册观察的属性</li><li>不能重复移除一个属性<br>以上会造成crash：<br><code>Terminating app due to uncaught exception &#39;NSRangeException&#39;, reason: &#39;-[__NSCFConstantString characterAtIndex:]: Range or index out of bounds</code></li></ul><h2 id="原理是什么？"><a href="#原理是什么？" class="headerlink" title="原理是什么？"></a><strong>原理是什么？</strong></h2><p><code>Automatic key-value observing is implemented using a technique called isa-swizzling. The isa pointer, as the name suggests, points to the object&#39;s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance. You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</code></p><h3 id="创建一个实例"><a href="#创建一个实例" class="headerlink" title="创建一个实例"></a>创建一个实例</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdHubKVOModel *testModel = [[AdHubKVOModel alloc]init];</span><br></pre></td></tr></table></figure><p>打印 testModel 可以发现 :<br><code>&lt;AdHubKVOModel: 0x60400044c390&gt;</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">NSObject</span>) <span class="built_in">NSObject</span> = &#123;</span><br><span class="line">    isa = AdHubKVOModel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>testModel 是AdHubKVOModel 的实例，其isa指针指向AdHubKVOModel</p><h3 id="执行注册观察者的方法"><a href="#执行注册观察者的方法" class="headerlink" title="执行注册观察者的方法:"></a>执行注册观察者的方法:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[testModel addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"keyPath"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>再次打印 testModel 可以发现：<br><code>&lt;AdHubKVOModel: 0x60400044c390&gt;</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">NSObject</span>) <span class="built_in">NSObject</span> = &#123;</span><br><span class="line">    isa = <span class="built_in">NSKVONotifying_AdHubKVOModel</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>NSKVONotifying_AdHubKVOModel</code> 是什么？苹果的文档中提起对对象的属性注册观察者时，会对所观察的对象的isa指针进行修改，此时isa指针指向一个中间类，而不是一个真实的类，创建一个以<code>NSKVONotifying_</code>开头的的类名。<br>在这个类中，系统为我们重写了被观察属性的 setter 方法。</p><h3 id="KVO是如何寻找被观察属性的？"><a href="#KVO是如何寻找被观察属性的？" class="headerlink" title="KVO是如何寻找被观察属性的？"></a>KVO是如何寻找被观察属性的？</h3><ol><li>属性对象第一次被观察时，系统会自动生成一个以<code>NSKVONotifying_</code>开头的派生类，并在这个派生类中重写被观察属性的 <code>setter</code> 方法，在 <code>setter</code> 方法内实现通知回调机制；</li><li>每个对象都有一个isa指针指向对象所在类，当一个类对象被首次观察时，会将 <code>isa</code> 指针指向派生类，这点在上文中已经验证过，在派生类中的 <code>setter</code> 方法中真正的实现赋值；</li><li>在派生类中会实现两个方法 <code>willChangeValueForKey:</code> 和 <code>didChangevlueForKey:</code> 其中<code>willChangeValueForKey:</code> 记录旧值；<code>didChangevlueForKey:</code> 记录新值；</li><li>紧接着<code>observeValueForKey:ofObject:change:context:</code> 被调用，此时即可获取到被观察属性值的变化。</li><li>如果在当前类中未找到要监测的属性，则会向当前类的父类中查找。。。一直找下去，找到执行第一步；没有找到，则不会触发通知回调。</li></ol><h3 id="限制条件是什么？"><a href="#限制条件是什么？" class="headerlink" title="限制条件是什么？"></a>限制条件是什么？</h3><h4 id="一：forKeyPath-为实例对象是否可以？"><a href="#一：forKeyPath-为实例对象是否可以？" class="headerlink" title="一：forKeyPath 为实例对象是否可以？"></a><em>一：<code>forKeyPath</code> 为实例对象是否可以？</em></h4><p>可以，但KVO不会触发回调通知。<br>如果手动创建一个该实例的setter方法，可以触发回调，因为KVO监测的是被监测对象属性的 <code>setter</code> 方法。<br>如果手动创建一个该实例的非setter方法，需要调用 <code>willChangeValueForKey 和 didChangeValueForKey</code> 触发回调。</p><h4 id="二：forKeyPath-为不存在的实例对象是否可以？"><a href="#二：forKeyPath-为不存在的实例对象是否可以？" class="headerlink" title="二：forKeyPath 为不存在的实例对象是否可以？"></a><em>二：<code>forKeyPath</code> 为不存在的实例对象是否可以？</em></h4><p>可以，但KVO不会触发回调通知。</p><h4 id="三：forKeyPath-为空-nil-时是否可以？"><a href="#三：forKeyPath-为空-nil-时是否可以？" class="headerlink" title="三：forKeyPath 为空 / nil 时是否可以？"></a><em>三：<code>forKeyPath</code> 为空 / nil 时是否可以？</em></h4><p><code>会造成crash：Terminating app due to uncaught exception &#39;NSRangeException&#39;, reason: &#39;-[__NSCFConstantString characterAtIndex:]: Range or index out of bounds</code></p><h4 id="四：-forKeyPath-为方法名是否可以？"><a href="#四：-forKeyPath-为方法名是否可以？" class="headerlink" title="四： forKeyPath 为方法名是否可以？"></a><em>四： <code>forKeyPath</code> 为方法名是否可以？</em></h4><p>可以，但KVO不会触发回调通知。</p><h4 id="五：同一个类中注册多个KVO会怎么样？"><a href="#五：同一个类中注册多个KVO会怎么样？" class="headerlink" title="五：同一个类中注册多个KVO会怎么样？"></a><em>五：同一个类中注册多个KVO会怎么样？</em></h4><p>所有的回调都是走同一个回调方法，需要对触发回调函数的来源进行判断。</p><h4 id="六：被观察类的父类中也实现了KVO会怎么样？"><a href="#六：被观察类的父类中也实现了KVO会怎么样？" class="headerlink" title="六：被观察类的父类中也实现了KVO会怎么样？"></a><em>六：被观察类的父类中也实现了KVO会怎么样？</em></h4><p>比如被观察类A，其父类为superA，superA中也实现了KVO，那么在C类中添加对A类的某个属性的观察，会怎么样？<br>被观察属性值都发生变化，先走C类中的回调方法，然后在走superA类中的回调方法。</p><p>总结： <code>forKeyPath</code> 不能为空，否则会crash，找不到则不会出发通知。</p><h2 id="模拟实现系统KVO"><a href="#模拟实现系统KVO" class="headerlink" title="模拟实现系统KVO"></a>模拟实现系统KVO</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^HBKVOCallBack)(<span class="built_in">NSDictionary</span> *info);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueChangeKey = <span class="string">@"HBKeyValueChangeKey"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueChangeNewKey = <span class="string">@"HBKeyValueChangeNewKey"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueChangeOldKey = <span class="string">@"HBKeyValueChangeOldKey"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueObserver = <span class="string">@"HBKeyValueObserver"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueKeyPath = <span class="string">@"HBKeyValueKeyPath"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueContent = <span class="string">@"HBKeyValueContent"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">HBHookKVO</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)HB_addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="built_in">NSString</span> *)content KVOCallBackBlock:(HBKVOCallBack)block;</span><br><span class="line">- (<span class="keyword">void</span>)HB_removeObserverAllPath:(<span class="built_in">NSObject</span> *)observer;</span><br><span class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="built_in">NSString</span> *)content;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NSObject+HBHookKVO.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="keyword">const</span> kObserver = <span class="string">"kObserver"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="keyword">const</span> kObserverKeyPath = <span class="string">"kObserverKeyPath"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="keyword">const</span> kKVOCallBackBlock = <span class="string">"kKVOCallBackBlock"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKVOClassPrefix = <span class="string">@"NSKVONotifying_"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">HBHookKVO</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)HB_addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="built_in">NSString</span> *)content KVOCallBackBlock:(HBKVOCallBack)block</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断传入的keyPath是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!keyPath || !keyPath.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kObserver, observer, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kObserverKeyPath, keyPath, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kKVOCallBackBlock, block, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断属性是否存在</span></span><br><span class="line">    SEL setterSel = [<span class="keyword">self</span> addNewSetterMethod:keyPath];</span><br><span class="line"></span><br><span class="line">    Class newClass = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">    <span class="comment">// 判断当前类是否是KVO中间类</span></span><br><span class="line">    <span class="built_in">NSString</span> *className = <span class="built_in">NSStringFromClass</span>(newClass);</span><br><span class="line">    <span class="keyword">if</span> (![className containsString:HBKVOClassPrefix]) &#123;</span><br><span class="line">    <span class="comment">// 动态创建一个类</span></span><br><span class="line">        <span class="built_in">NSString</span> *newName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>, HBKVOClassPrefix, <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>.class)];</span><br><span class="line">        Class kvoClass = <span class="built_in">NSClassFromString</span>(newName);</span><br><span class="line">        <span class="keyword">if</span> (!kvoClass) &#123;</span><br><span class="line">            newClass = objc_allocateClassPair(<span class="keyword">self</span>.class, newName.UTF8String, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 注册这个类</span></span><br><span class="line">            objc_registerClassPair(newClass);</span><br><span class="line">            <span class="comment">// 改变isa指针</span></span><br><span class="line">            object_setClass(<span class="keyword">self</span>, newClass);</span><br><span class="line">            newClass = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            object_setClass(<span class="keyword">self</span>, kvoClass);</span><br><span class="line">            newClass = kvoClass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断对象的类是否重写过对象的setter方法</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> hasSelector:setterSel <span class="keyword">class</span>:<span class="keyword">self</span>.class]) &#123;</span><br><span class="line">        class_addMethod(newClass, setterSel, (IMP)kvo_setter, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)HB_removeObserverAllPath:(<span class="built_in">NSObject</span> *)observer</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> HB_removeObserver:observer forKeyPath:<span class="literal">nil</span> context:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> HB_removeObserver:observer forKeyPath:keyPath context:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="built_in">NSString</span> *)content</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) hasPrefix:HBKVOClassPrefix]) <span class="keyword">return</span>;</span><br><span class="line">    object_setClass(<span class="keyword">self</span>, class_getSuperclass([<span class="keyword">self</span> <span class="keyword">class</span>]));</span><br><span class="line">    objc_removeAssociatedObjects(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (SEL)addNewSetterMethod:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">&#123;</span><br><span class="line">    SEL setterSel = <span class="built_in">NSSelectorFromString</span>(setterForVar(keyPath));</span><br><span class="line">    <span class="keyword">return</span> setterSel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)hasSetterMethodWithKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> result = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历当前类和其父类中的所有属性</span></span><br><span class="line">    Class <span class="keyword">class</span> = <span class="keyword">self</span>.class;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">class</span>) &#123;</span><br><span class="line">        objc_property_t *property = class_copyPropertyList(<span class="keyword">class</span>, &amp;count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            objc_property_t t = property[i];</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = property_getName(t);</span><br><span class="line">            <span class="built_in">NSString</span> *key = [[<span class="built_in">NSString</span> alloc]initWithUTF8String:name];</span><br><span class="line">            <span class="keyword">if</span> ([key isEqualToString:keyPath]) &#123;</span><br><span class="line">                result = <span class="literal">YES</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">class</span> = class_getSuperclass(<span class="keyword">class</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)hasSelector:(SEL)sel <span class="keyword">class</span>:(Class)sClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> result = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> methodCount = <span class="number">0</span>;</span><br><span class="line">    Method *methodList = class_copyMethodList(sClass, &amp;methodCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sel == method_getName(methodList[i])) &#123;</span><br><span class="line">            result = <span class="literal">YES</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Core method</span></span><br><span class="line"><span class="keyword">void</span> kvo_setter(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSString</span> *key)&#123;</span><br><span class="line">    <span class="keyword">struct</span> objc_super superClass = &#123;</span><br><span class="line">        .receiver = <span class="keyword">self</span>,</span><br><span class="line">        .super_class = class_getSuperclass(object_getClass(<span class="keyword">self</span>))</span><br><span class="line">    &#125;;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(<span class="keyword">void</span> *, SEL, <span class="keyword">id</span>))objc_msgSendSuper)(&amp;superClass, _cmd, key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSObject</span> *observer = objc_getAssociatedObject(<span class="keyword">self</span>, kObserver);</span><br><span class="line">    <span class="built_in">NSString</span> *keyPath = objc_getAssociatedObject(<span class="keyword">self</span>, kObserverKeyPath);</span><br><span class="line">    <span class="built_in">NSDictionary</span> *dict = @&#123;HBKeyValueKeyPath : keyPath, HBKeyValueObserver: observer, HBKeyValueChangeKey : @&#123;<span class="built_in">NSKeyValueChangeNewKey</span> : key&#125;, HBKeyValueContent : <span class="string">@""</span>&#125;;</span><br><span class="line">    HBKVOCallBack block = objc_getAssociatedObject(<span class="keyword">self</span>, kKVOCallBackBlock);</span><br><span class="line">    <span class="keyword">if</span> (block)</span><br><span class="line">        block(dict);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *setterForVar(<span class="built_in">NSString</span> *keyPath)&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *firstChar = [keyPath substringToIndex:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ([firstChar isEqualToString:<span class="string">@"_"</span>]) &#123;</span><br><span class="line">        firstChar = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@:"</span>, keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        firstChar = firstChar.uppercaseString;</span><br><span class="line">        keyPath = [keyPath stringByReplacingCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>) withString:firstChar];</span><br><span class="line">        firstChar = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@:"</span>, keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> firstChar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是KVO&quot;&gt;&lt;a href=&quot;#什么是KVO&quot; class=&quot;headerlink&quot; title=&quot;什么是KVO?&quot;&gt;&lt;/a&gt;&lt;em&gt;什么是KVO?&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Key-value observing is a mechanism th
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KVO" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KVO/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>KVC</title>
    <link href="https://github.com/songMW/stack.github.io/2017/06/04/Objective-C/KV_X/KVC/"/>
    <id>https://github.com/songMW/stack.github.io/2017/06/04/Objective-C/KV_X/KVC/</id>
    <published>2017-06-04T03:05:05.000Z</published>
    <updated>2018-05-10T07:22:32.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSKeyValueCoding简介"><a href="#NSKeyValueCoding简介" class="headerlink" title="NSKeyValueCoding简介"></a>NSKeyValueCoding简介</h2><blockquote><p>A mechanism by which you can access the properties of an object indirectly by name or key。</p></blockquote><ol><li>KVC 是 Key-Value-Coding 的简称， 是一种间接访问对象属性的机制;</li><li>KVC 是通过字符串的名字 [key] 来访问类属性的机制, 而不是通过调用 setter、getter 方法去访问；</li><li>KVC 是通过名称（键）简介访问和操作对象的属性；</li><li>KVC 的键是属性的名称，值是属性的值。</li></ol><h2 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h2><p>对象的内部状态是由属性封装，该状态无法直接读取，需要使用属性的访问方法：setter和getter；编译器会自动生成setter和getter方法，减少手动编写的代码量并提高了程序的一致性和可维护性。</p><h3 id="如何获取对象的属性"><a href="#如何获取对象的属性" class="headerlink" title="如何获取对象的属性"></a>如何获取对象的属性</h3><ol><li>使用标准的属性访问方法访问该属性；</li><li>使用点语法访问，编译器会自动将属性的点表达式转换为对应的调用访问方法的语句 -&gt; 标准的属性访问方法。</li></ol><h3 id="使用标准属性访问方法更新模型"><a href="#使用标准属性访问方法更新模型" class="headerlink" title="使用标准属性访问方法更新模型"></a>使用标准属性访问方法更新模型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)updateModel:(<span class="built_in">NSString</span> *)value forKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToStirng:<span class="string">@"age"</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToStirng:<span class="string">@"name"</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次属性的值发生改变时都需要调用这段代码来更新新值，不具备良好的伸缩性且难以维护。</p><h3 id="使用键值编码更新模型"><a href="#使用键值编码更新模型" class="headerlink" title="使用键值编码更新模型"></a>使用键值编码更新模型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)updateModel:(<span class="built_in">NSString</span> *)value forKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> setValue: value forKey: key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码量少了很多，易于维护和拓展，当模型中的属性发生变化时，无须逐个去更新模型值。</p><h2 id="键和键路径"><a href="#键和键路径" class="headerlink" title="键和键路径"></a>键和键路径</h2><ol><li>键是用于标识属性的字符串；</li><li>键路径指明了需要遍历的对象的属性序列。</li></ol><h3 id="使用KVC获取多个属性的值"><a href="#使用KVC获取多个属性的值" class="headerlink" title="使用KVC获取多个属性的值"></a>使用KVC获取多个属性的值</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@"name"</span>, <span class="string">@"age"</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = [person dictionaryWithValuesForKeys:array];</span><br></pre></td></tr></table></figure><p>这里的 <code>name</code> 和 <code>age</code> 属性都是 <code>person</code> 类的实例。</p><h3 id="使用KVC设置多个属性值"><a href="#使用KVC设置多个属性值" class="headerlink" title="使用KVC设置多个属性值"></a>使用KVC设置多个属性值</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name *tom = [[Name alloc]init];</span><br><span class="line">Address *home = [[Address alloc]init];</span><br><span class="line"><span class="built_in">NSDictionary</span> *personProperties = @&#123;<span class="string">@"name"</span> : tom, <span class="string">@"address"</span> : home&#125;;</span><br><span class="line">[person setValuesForKeysWithDictionary:personProperties];</span><br></pre></td></tr></table></figure><p>这里只要是  <code>person</code> 类中的实例都可以去设置，因为KVC可以遍历键路径。 简单的说就是 <code>person.zone...</code> 这样的形式。</p><h2 id="实现KVC"><a href="#实现KVC" class="headerlink" title="实现KVC"></a>实现KVC</h2><p>键值编码的设计基于以下两种基本的机制：</p><ol><li>通过名称/键间接访问对象的属性，而不是直接调用访问方法；</li><li>将键与属性访问方法或属性支持的变量对应起来。</li></ol><p>非正式协议 <code>NSKeyValueCoding</code> 定义了通过名称/键间接访问对象属性的机制。<code>NSObject</code> 类遵循  <code>NSKeyValueCoding</code>  协议，因此它的所有类都为键值编码提供支持。</p><h3 id="键值编码API"><a href="#键值编码API" class="headerlink" title="键值编码API"></a>键值编码API</h3><p>非正式协议 <code>NSKeyValueCoding</code> 定义了标准的键值编码API，这些方法可以获取/设置属性值，属性验证及配置键值编码操作。</p><h4 id="accessInstanceVariablesDirectly"><a href="#accessInstanceVariablesDirectly" class="headerlink" title="accessInstanceVariablesDirectly"></a><code>accessInstanceVariablesDirectly</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)accessInstanceVariablesDirectly;</span><br></pre></td></tr></table></figure><p>该方法返回一个BOOL值， YES表示键值编码可以直接访问相应的实例变量，NO表示不能只能搜索 <code>set&lt;key&gt;</code>的名称。<br>默认返回YES，可以重写该方法。</p><h4 id="valueForUndefinedKey"><a href="#valueForUndefinedKey" class="headerlink" title="valueForUndefinedKey"></a><code>valueForUndefinedKey</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br></pre></td></tr></table></figure><p>当 <code>valueForKey:</code> 方法发现没有与输入的键对应的时候会调用。<br>未定义键方法的默认实现会抛出<code>NSUndefinedKeyException</code>异常，可以在子类中重写使未定义键返回自定义值。</p><h4 id="setValue-forUndefinedKey"><a href="#setValue-forUndefinedKey" class="headerlink" title="setValue:forUndefinedKey:"></a><code>setValue:forUndefinedKey:</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key</span><br></pre></td></tr></table></figure><p>当 <code>setValue:forKey:</code> 方法发现没有与输入的键对应的时候会调用。<br>未定义键方法的默认实现会抛出<code>NSUndefinedKeyException</code>异常，可以在子类中重写使未定义键返回自定义值。</p><h4 id="valueForUndefinedKey：方法的实现"><a href="#valueForUndefinedKey：方法的实现" class="headerlink" title="valueForUndefinedKey：方法的实现"></a>valueForUndefinedKey：方法的实现</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == key &amp;&amp; [<span class="string">@"hello"</span> isEqualToString: key]) &#123;</span><br><span class="line">        <span class="keyword">return</span> 自定义值；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抛出异常</span></span><br><span class="line">    [<span class="built_in">NSException</span> raise: <span class="built_in">NSUndefinedKeyException</span> format: <span class="string">@"key %@ not defined"</span>, key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setNilValueForKey-NSString-key"><a href="#setNilValueForKey-NSString-key" class="headerlink" title="setNilValueForKey:(NSString *)key"></a><code>setNilValueForKey:(NSString *)key</code></h4><p>如果设置的属性是基本数据类型时，不能<code>setValue:nil</code> ，会crash。需要重写这个方法。</p><h4 id="validateValue-forKey-error"><a href="#validateValue-forKey-error" class="headerlink" title="validateValue:forKey:error:"></a><code>validateValue:forKey:error:</code></h4><p>它可以用来检查 set 的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。</p><h4 id="validateValue-forKeyPath-error"><a href="#validateValue-forKeyPath-error" class="headerlink" title="validateValue:forKeyPath:error"></a><code>validateValue:forKeyPath:error</code></h4><h4 id="集合返回可变实例"><a href="#集合返回可变实例" class="headerlink" title="集合返回可变实例"></a>集合返回可变实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *items = [order mutaleArrayValueForKey:@&quot;items&quot;];</span><br></pre></td></tr></table></figure><p>即使是只读集合，也可以返回可变集合实例。</p><h3 id="键值搜索-setValue-forKey-调用顺序"><a href="#键值搜索-setValue-forKey-调用顺序" class="headerlink" title="键值搜索 setValue:forKey: 调用顺序"></a>键值搜索 <code>setValue:forKey:</code> 调用顺序</h3><ol><li>搜索目标类寻找名称符合格式 <code>set&lt;Key&gt;:</code> ，<code>setIs&lt;Key&gt;:</code> 的访问方法，<code>key</code>是属性名称；比如：key = “name”，KVC在目标类中搜索名为<code>setName:</code>的访问方法；</li><li>如果没有搜索到访问方法，<code>accessInstanceVariablesDirectly</code> 返回YES，就会在目标类中搜索名称为 <code>_&lt;key&gt;</code>，<code>_is&lt;Key&gt;</code>，<code>&lt;key&gt;</code>，<code>is&lt;Key&gt;</code> 格式的实例变量。注：搜索优先级从高到低。</li><li>如果找到了匹配的访问方法或者实例变量，<code>setValue:forKey:</code>  就会被用于设置值；</li><li>如果没有找到匹配的访问方法或实例变量，接收对象 <code>setValue:forUndefinedKey:</code> 会被调用。</li></ol><p>代码验证：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"HBBaseModel.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KVCModel</span> : <span class="title">HBBaseModel</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_name;</span><br><span class="line">    <span class="built_in">NSString</span> *_isName;</span><br><span class="line">    <span class="built_in">NSString</span> *name;</span><br><span class="line">    <span class="built_in">NSString</span> *isName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)newName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KVCModel</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _name = <span class="string">@"_name"</span>;</span><br><span class="line">        _isName = <span class="string">@"_isName"</span>;</span><br><span class="line">        name = <span class="string">@"name"</span>;</span><br><span class="line">        isName = <span class="string">@"isName"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 有set&lt;Key&gt;, 此时打印结果只有 _name 和 _isName 的值改变为 newName</span></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)newName</span><br><span class="line">&#123;</span><br><span class="line">    _name = newName;</span><br><span class="line">    _isName = newName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果注释掉 set&lt;Key&gt;， 会去调用 accessInstanceVariablesDirectly， 如果返回YES时会去查找实例变量，执行 3-6步；返回NO，则不会去查找实例变量，执行第8步。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 注释掉set&lt;Key&gt;, 此时只有 _name 的值改变为设置的新值；</span></span><br><span class="line"><span class="comment">// 4. 注释掉 _name, 此时只有 _isName 的值改变为设置的新值；</span></span><br><span class="line"><span class="comment">// 5. 注释掉_isName, 此时只有 name 的值改变为设置的新值；</span></span><br><span class="line"><span class="comment">// 6. 注释掉 name, 此时只有 isName 的值改变为设置的新值；</span></span><br><span class="line"><span class="comment">// 7. 如果没有查找到上述相关的KEY，则会执行第8步。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 都没有查找到对应KEY则会调用 setValue:forUndefinedKey:</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)HB_description</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *des = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\n_name:%@\n_isName:%@\nname:%@\nisName:%@"</span>, _name, _isName, name, isName];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"=====================PRINT BEGIN====================="</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, des);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"=====================PRINT END======================="</span>);</span><br><span class="line">    <span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="键值搜索-valueForKey-调用顺序"><a href="#键值搜索-valueForKey-调用顺序" class="headerlink" title="键值搜索 valueForKey: 调用顺序"></a>键值搜索 <code>valueForKey:</code> 调用顺序</h3><ol><li>获取方法的名称<key>访问方法格式，<code>get&lt;Key&gt;</code>，<code>&lt;key&gt;</code>，<code>is&lt;Key&gt;</code>。注：搜索优先级从高到低。</key></li><li>如果没有搜索到访问方法，会去搜索<code>countOf&lt;Key&gt;</code> 和 <code>objectIn&lt;key&gt;AtIndex:(&lt;Key&gt;AtIndexes:)</code>这两个方法，一般很少用；</li><li>如果没有搜索到上述方法，<code>accessInstanceVariablesDirectly</code> 返回YES，就会在目标类中搜索名称为  <code>_&lt;key&gt;</code> 格式的实例变量。注：网上有些教程说没有找到 <code>_&lt;key&gt;</code> 会按 <code>_is&lt;Key&gt;</code>，<code>&lt;key&gt;</code>，<code>is&lt;Key&gt;</code>  的顺序依次去查询，代码验证的时候发现 <code>_is&lt;Key&gt;</code>，<code>&lt;key&gt;</code>，<code>is&lt;Key&gt;</code>  返回都是null。</li><li>如果找到了匹配的访问方法或者实例变量，<code>valueForKey:</code>  就会被用于获取值；</li><li>如果没有找到匹配的访问方法或实例变量，接收对象 <code>valueForUndefinedKey:</code> 会被调用。</li></ol><p>代码验证：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"KVCModel.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KVCModel</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)<span class="built_in">NSMutableArray</span> *dataArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KVCModel</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _name = <span class="string">@"_name"</span>;</span><br><span class="line">        _isName = <span class="string">@"_isName"</span>;</span><br><span class="line">        name = <span class="string">@"name"</span>;</span><br><span class="line">        isName = <span class="string">@"isName"</span>;</span><br><span class="line"></span><br><span class="line">        _dataArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        [_dataArray addObject:_name];</span><br><span class="line">        [_dataArray addObject:_isName];</span><br><span class="line">        [_dataArray addObject:name];</span><br><span class="line">        [_dataArray addObject:isName];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 首先查找 get&lt;Key&gt;</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"getName"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 其次查找 &lt;key&gt;</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"name"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 然后是is&lt;Key&gt;</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)isName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"isName"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果1，2，3都没有查找到</span></span><br><span class="line"><span class="comment">// 4. 查找countOf&lt;Key&gt;</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataArray.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (KVCModel *)objectInNameAtIndex:(<span class="built_in">NSUInteger</span>)index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.dataArray objectAtIndex:index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果1，2，3，4都没有，查找accessInstanceVariablesDirectly</span></span><br><span class="line"><span class="comment">// 如果accessInstanceVariablesDirectly返回YES；</span></span><br><span class="line">查找_&lt;key&gt;格式的实例变量；没有该格式的变量时会执行第<span class="number">8</span>步。</span><br><span class="line"><span class="comment">// 如果accessInstanceVariablesDirectly返回NO, 执行第8步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 抛出异常</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义KVC"><a href="#自定义KVC" class="headerlink" title="自定义KVC"></a>自定义KVC</h3><h4 id="实现-setValue-forKey"><a href="#实现-setValue-forKey" class="headerlink" title="实现 setValue:forKey:"></a>实现 <code>setValue:forKey:</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)HB_setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!key.length || !key) &#123;</span><br><span class="line">        <span class="built_in">NSException</span> *exception = [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"HBKeyValueCoding"</span> reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"key:%@ is not exist!"</span>, key] userInfo:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">@throw</span> exception;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find set&lt;Key&gt;</span></span><br><span class="line">    <span class="built_in">NSString</span> *setKey = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@:"</span>, key.capitalizedString];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(setKey)]) &#123;</span><br><span class="line">        HBSuppressPerformSelectorLeakWarning(</span><br><span class="line">            [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(setKey) withObject:value];</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find setIs&lt;Key&gt;</span></span><br><span class="line">    <span class="built_in">NSString</span> *setIsKey = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"setIs%@:"</span>,key.capitalizedString];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(setIsKey)]) &#123;</span><br><span class="line">        HBSuppressPerformSelectorLeakWarning(</span><br><span class="line">            [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(setIsKey) withObject:value];</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if set&lt;Key&gt; and setIs&lt;Key&gt; is not exist</span></span><br><span class="line">    <span class="built_in">BOOL</span> result = [<span class="keyword">self</span>.class accessInstanceVariablesDirectly];</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        <span class="built_in">NSException</span> *exception = [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"HBKeyValueCoding"</span> reason:<span class="string">@"accessInstanceVariablesDirectly return NO!"</span> userInfo:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">@throw</span> exception;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if accessInstanceVariablesDirectly return YES, find current class variables.</span></span><br><span class="line">    <span class="built_in">NSArray</span> *varLists = [<span class="keyword">self</span> HB_accessCurrenClassVariables];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// _&lt;key&gt;</span></span><br><span class="line">    <span class="built_in">NSString</span> *keyName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"_%@"</span>, key];</span><br><span class="line">    <span class="keyword">if</span> ([varLists containsObject:keyName]) &#123;</span><br><span class="line">        Ivar var = class_getInstanceVariable(<span class="keyword">self</span>.class, keyName.UTF8String);</span><br><span class="line">        object_setIvar(<span class="keyword">self</span>, var, value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// _is&lt;Key&gt;</span></span><br><span class="line">    keyName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"_is%@"</span>, key.capitalizedString];</span><br><span class="line">    <span class="keyword">if</span> ([varLists containsObject:keyName]) &#123;</span><br><span class="line">        Ivar var = class_getInstanceVariable(<span class="keyword">self</span>.class, keyName.UTF8String);</span><br><span class="line">        object_setIvar(<span class="keyword">self</span>, var, value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;key&gt;</span></span><br><span class="line">    keyName = key;</span><br><span class="line">    <span class="keyword">if</span> ([varLists containsObject:keyName]) &#123;</span><br><span class="line">        object_setIvar(selIvar var = class_getInstanceVariable(<span class="keyword">self</span>.class, keyName.UTF8String);</span><br><span class="line">        object_setIvar(<span class="keyword">self</span>, var, value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//is&lt;Key&gt;</span></span><br><span class="line">    keyName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"is%@"</span>, key.capitalizedString];</span><br><span class="line">    <span class="keyword">if</span> ([varLists containsObject:keyName]) &#123;</span><br><span class="line">        Ivar var = class_getInstanceVariable(<span class="keyword">self</span>.class, keyName.UTF8String);</span><br><span class="line">        object_setIvar(<span class="keyword">self</span>, var, value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// deal with exception</span></span><br><span class="line">    [<span class="keyword">self</span> setValue:value forUndefinedKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n ==================== IMPORTANT ===================="</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Class:%@ UndefinedKey: %@"</span>, <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>.class), key);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"==================== IMPORTANT ===================="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-valueForKey"><a href="#实现-valueForKey" class="headerlink" title="实现 valueForKey:"></a>实现 <code>valueForKey:</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)HB_valueForKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *value = <span class="string">@""</span>;</span><br><span class="line">    <span class="keyword">if</span> (!key.length || !key) &#123;</span><br><span class="line">        <span class="built_in">NSException</span> *exception = [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"HBKeyValueCoding"</span> reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"key:%@ is not exist!"</span>, key] userInfo:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">@throw</span> exception;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find get&lt;Key&gt;</span></span><br><span class="line">    <span class="built_in">NSString</span> *getKey = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"get%@"</span>, key.capitalizedString];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(getKey)]) &#123;</span><br><span class="line">        HBSuppressPerformSelectorLeakWarning(</span><br><span class="line">            value = [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(getKey)];</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if get&lt;Key&gt; not exist, find &lt;key&gt;</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(key)]) &#123;</span><br><span class="line">        HBSuppressPerformSelectorLeakWarning(</span><br><span class="line">            value = [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(key)];</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if &lt;key&gt; not exist, find is&lt;Key&gt;</span></span><br><span class="line">    <span class="built_in">NSString</span> *isKey = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"is%@"</span>, key.capitalizedString];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(isKey)]) &#123;</span><br><span class="line">        HBSuppressPerformSelectorLeakWarning(</span><br><span class="line">            value = [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(isKey)];</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find accessInstanceVariablesDirectly.</span></span><br><span class="line">    <span class="built_in">BOOL</span> result = [<span class="keyword">self</span>.class accessInstanceVariablesDirectly];</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        <span class="built_in">NSException</span> *exception = [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"HBKeyValueCoding"</span> reason:<span class="string">@"accessInstanceVariablesDirectly return NO"</span> userInfo:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">@throw</span> exception;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSArray</span> *varLists = [<span class="keyword">self</span> HB_accessCurrenClassVariables];</span><br><span class="line">    <span class="built_in">NSString</span> *keyName = key;</span><br><span class="line">    <span class="built_in">NSString</span> *fisrtChar = [key substringToIndex:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (![fisrtChar isEqualToString:<span class="string">@"_"</span>]) &#123;</span><br><span class="line">        keyName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"_%@"</span>, key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([varLists containsObject:keyName]) &#123;</span><br><span class="line">        Ivar var = class_getInstanceVariable(<span class="keyword">self</span>.class, keyName.UTF8String);</span><br><span class="line">        <span class="keyword">id</span> varValue = object_getIvar(<span class="keyword">self</span>, var);</span><br><span class="line">        value = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, varValue];</span><br><span class="line">         <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">    [<span class="keyword">self</span> valueForUndefinedKey:key];</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n ==================== IMPORTANT ===================="</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Class:%@ valueForUndefinedKey: %@"</span>, <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>.class), key);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"==================== IMPORTANT ===================="</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"没有匹配到相关key:我也很为难！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是模拟KVC的实现方式，其中添加了容错处理，更容易去定位。日常开发中使用KVC用系统的就可以，手动实现 <code>valueForUndefinedKey</code> 和 <code>setValue: forUndefinedKey:</code> 即可。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="后台JSON数据转模型"><a href="#后台JSON数据转模型" class="headerlink" title="后台JSON数据转模型"></a>后台JSON数据转模型</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - Dict to be mapped in your model objects</span></span><br><span class="line">- (<span class="keyword">void</span>)HB_setterValuesForKeysWithDictionary:(<span class="built_in">NSDictionary</span> *)dict</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (dict &amp;&amp; dict.count) &#123;</span><br><span class="line">        [dict enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull key, <span class="keyword">id</span>  _Nonnull obj, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            [<span class="keyword">self</span> HB_setValue:obj forKey:key];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSAssert</span>(dict != <span class="literal">nil</span>, <span class="string">@"传入的字典为空或者不存在！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - JSON to be mapped in your model objects</span></span><br><span class="line">- (<span class="keyword">void</span>)HB_setterValuesForKeysWithJSONString:(<span class="built_in">NSString</span> *)jsonString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (jsonString.length) &#123;</span><br><span class="line">        <span class="built_in">NSData</span> *data = [jsonString dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSDictionary</span> *dict = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="built_in">NSJSONReadingMutableContainers</span> error:<span class="literal">nil</span>];</span><br><span class="line">        [<span class="keyword">self</span> HB_setterValuesForKeysWithDictionary:dict];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSAssert</span>(jsonString.length &gt; <span class="number">0</span>, <span class="string">@"传入的字典为空或者不存在！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NSKeyValueCoding简介&quot;&gt;&lt;a href=&quot;#NSKeyValueCoding简介&quot; class=&quot;headerlink&quot; title=&quot;NSKeyValueCoding简介&quot;&gt;&lt;/a&gt;NSKeyValueCoding简介&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KVC" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KVC/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>宏(define)与常量(const)</title>
    <link href="https://github.com/songMW/stack.github.io/2017/05/30/Objective-C/Define_Const/"/>
    <id>https://github.com/songMW/stack.github.io/2017/05/30/Objective-C/Define_Const/</id>
    <published>2017-05-30T07:59:06.000Z</published>
    <updated>2018-05-10T07:21:10.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="当我们想全局共用一些数据时-可以用宏、变量、常量"><a href="#当我们想全局共用一些数据时-可以用宏、变量、常量" class="headerlink" title="当我们想全局共用一些数据时, 可以用宏、变量、常量"></a>当我们想全局共用一些数据时, 可以用宏、变量、常量</h2><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p>定义形式: #define THIS_IS_MACRO @”this is macro”<br>在预处理器里进行文本替换, 没有类型, 不做任何类型检查, 编译器可以对相同的字符串进行优化, 大量宏会导致二进制包变大</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>定义形式: NSString *thisIsVariable = @”this is variable”;<br>共享一块内存空间, 就算项目中N处用到, 也不会分配N块内存空间, 可以被修改, 在编译阶段会执行类型检查</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>定义形式: </p><ol><li>const NSString *thisIsConstVariable = @”this is const variable, value can changed”;</li><li>NSString const *thisIsConstVariable = @”this is const variable, value can changed”;</li><li>NSString *const thisIsConstVariable = @”this is const variable, value can not changed”;</li><li>static const NSString *thisIsStaticConstVariable = @”this is static const variable”;</li></ol><p>共享一块内存空间, 就算项目中N处用到, 也不会分配N块内存空间, 可以根据const修饰的位置设定能否修改, 在编译阶段会执行类型检查</p><h2 id="常量区分"><a href="#常量区分" class="headerlink" title="常量区分"></a>常量区分</h2><ol><li><p>全局常量: 不管你定义在任何文件夹,外部都能访问<br>只要在类中声明一个全局变量, 该变量在整个工程中都可以访问到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//在 ViewController 中声明一个全局变量 testSting</span><br><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">NSString *const testSting = @&quot;hello world&quot;;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//在 AppDelegate 中可以获取到该值</span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions </span><br><span class="line">&#123;</span><br><span class="line">    extern NSString *const testSting;</span><br><span class="line">    NSLog(@&quot;%@&quot;, testSting);</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部常量: 用static修饰后,不能提供外界访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//在 ViewController 中声明一个全局变量 testSting</span><br><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">static NSString *const testStaticString = @&quot;static&quot;;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//在 AppDelegate 中获取</span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions </span><br><span class="line">&#123;</span><br><span class="line">    extern NSString *const testStaticString;</span><br><span class="line">    NSLog(@&quot;%@&quot;, testStaticString);</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//会报错</span><br><span class="line">Undefined symbols for architecture x86_64:</span><br><span class="line">&quot;_testStaticString&quot;, referenced from:</span><br><span class="line">-[AppDelegate application:didFinishLaunchingWithOptions:] in AppDelegate.o</span><br><span class="line">ld: symbol(s) not found for architecture x86_64</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure></li></ol><h2 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h2><p>extern是用来声明一个已经定义过的变量, 多个类中同时声明同一个变量但却没有初始化, 当访问这个变量时会报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols for architecture x86_64:</span><br><span class="line">&quot;_testSting&quot;, referenced from:</span><br><span class="line">-[AppDelegate application:didFinishLaunchingWithOptions:] in AppDelegate.o</span><br><span class="line">ld: symbol(s) not found for architecture x86_64</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure></p><p>如果多个类中同时使用extern声明同一个变量, 定义多次, 则会报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ld: 1 duplicate symbol for architecture x86_64</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure></p><pre><code>* extern可以用来声明一个全局变量, 但是不能用来定义变量* 默认情况下, 一个全局变量是可以供多个源文件共享的, 也就说, 多个源文件中同名的全局变量都代表着同一个变量* 如果在定义全局变量的时候加上static关键字, 此时static的作用在于限制该全局变量的作用域, 只能在定义该全局变量的文件中才能使用, 跟其他源文件中的同名变量互不干扰</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;当我们想全局共用一些数据时-可以用宏、变量、常量&quot;&gt;&lt;a href=&quot;#当我们想全局共用一些数据时-可以用宏、变量、常量&quot; class=&quot;headerlink&quot; title=&quot;当我们想全局共用一些数据时, 可以用宏、变量、常量&quot;&gt;&lt;/a&gt;当我们想全局共用一些数据时
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Define_Const" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Define-Const/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
</feed>
