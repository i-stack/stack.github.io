<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stack.blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/songMW/stack.github.io/"/>
  <updated>2018-03-20T07:13:13.903Z</updated>
  <id>https://github.com/songMW/stack.github.io/</id>
  
  <author>
    <name>stack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop for mac</title>
    <link href="https://github.com/songMW/stack.github.io/2018/03/19/hadoop/hadoopForMac/"/>
    <id>https://github.com/songMW/stack.github.io/2018/03/19/hadoop/hadoopForMac/</id>
    <published>2018-03-19T07:17:39.000Z</published>
    <updated>2018-03-20T07:13:13.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Hadoop"><a href="#什么是Hadoop" class="headerlink" title="什么是Hadoop?"></a>什么是Hadoop?</h2><ol><li>开源，可靠的，可扩展的分布式计算开发开源软件；</li><li>作者：Doug Cutting；</li><li>受Goole三篇论文启发（GFS，MapReduce，BigTabel）。</li></ol><p>解释：</p><ul><li>开源：说明是免费；</li><li>可靠： 数据由备份，可自动恢复</li><li>可扩展：灵活性高</li></ul><h2 id="HDFS基本概念"><a href="#HDFS基本概念" class="headerlink" title="HDFS基本概念"></a>HDFS基本概念</h2><ol><li>Java实现，分布式，可横向扩展的分布式文件系统</li><li>HDFS是Hadoop核心</li><li>基于unix，linix系统</li><li>容错性高，高吞吐量的数据访问</li><li>简单一致性模型<ul><li>一次写入多次查询，写入文件不能修改，如需修改先删除再写入新数据</li><li>不支持并发写入</li><li>小文件不适合</li></ul></li><li>硬件错误是常态</li><li>流式数据访问，适用于处理批量，不适合随机定位访问</li><li>存储超大文件， PB/EB，单个文件一般在百MB以上</li><li>采用就近原则分配节点执行<ul><li>有ABC三台服务器，在A中执行下载任务，则在A上分配节点，不会在其他服务器上分配</li></ul></li><li>运行在廉价的服务器上</li><li>HDFS局限性<ul><li>不适合低延迟数据访问</li><li>高吞吐量可能要求以高延迟作代价</li><li>无法高效存储小文件</li><li>文件数量限制由NameNode决定</li><li>不支持多用户写入与修改</li></ul></li><li>冗余副本策略<ul><li><code>hdfs-site.xml</code> 设置指定副本数量，所有数据库都有副本</li></ul></li><li>机架策略<ul><li>集群一般在不同的机架上</li><li>机架间带宽 &lt; 机架内带宽</li></ul></li><li>心跳机制<ul><li>NameNode周期性从DataNode接收心跳信号和块报告</li><li>NameNode根据块报告验证元数据</li><li>没有按时发送心跳的DataNode会被标记为宕机，不再有I/O请求</li></ul></li><li>块<ul><li>HDFS基于存储是块，块是读写的最小数据单位</li><li>Hadoop 1.x 默认64M</li><li>Hadoop 2.x默认128M</li><li>存储200M文件<ul><li>1.x 分四个块 3个64M块，一个8M块</li><li>2.x 分两个块 1个128M块，一个72M块</li></ul></li><li>块大小可自行配置，建议使用默认<ul><li>每个块都有一个自己的全局ID</li><li>每个块都是独立存储单位</li></ul></li><li><code>hdfs-site.xml</code> 配置<ul><li>1.x 对应 dfs.block.size</li><li>2.x 对应 dfs.blocksize</li></ul></li><li>一份元数据，两份备份，可以动态修改备份数</li></ul></li><li>HDFS元数据<ul><li>文件系统目录树信息<ul><li>文件名，目录名</li><li>文件目录从属关系</li><li>文件目录的大小，创建及最后访问时间</li><li>文件目录的权限</li></ul></li></ul></li></ol><h2 id="Hadoop核心"><a href="#Hadoop核心" class="headerlink" title="Hadoop核心"></a>Hadoop核心</h2><ol><li>HDFS：Hadoop Distributed File System 分布式文件系统</li><li>YARN：Yet Another Resource Negotiator 资源管理调度系统</li><li>Common：公共模块，为其他Hadoop模块提供基础设施</li><li>MapReduce：处理数据，一个分布式并行框架<ul><li>读取输入文件内容，解析成key, value对</li><li>重写map方法，编写业务逻辑输出新的key, value对</li><li>对输出的key, value分区</li><li>对数据按照key 排序，分组，相同key的value放到一个集合中</li></ul></li></ol><h2 id="HDFS的架构"><a href="#HDFS的架构" class="headerlink" title="HDFS的架构"></a>HDFS的架构</h2><ol><li>主从结构<ul><li>主节点，只有一个：NameNode</li><li>从节点，有很多个：DataNode</li></ul></li><li>NameNode负责：<ul><li>接收用户操作请求</li><li>维护文件系统的目录结构</li><li>管理文件与block之间的关系，block与 DataNode 之间的关系</li></ul></li><li>DataNode负责：<ul><li>存储文件</li><li>文件被分成block存储在磁盘上</li><li>为保证数据安全，文件会有多个副本</li><li>启动时遍历本地文件系统，产生一个hdfs数据块和本地文件关系列表</li></ul></li><li>SecondaryNameNode负责：辅助 NameNode<ul><li>所在物理节点存储</li><li>一次写入多次读取</li><li>文件由数据块组成 64M，128M</li><li>数据块尽量分布各节点</li></ul></li></ol><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ol><li>扩容能力：<ul><li>能可靠的存储和处理千兆（PB）字节数据</li><li>动态新增及卸载机器</li></ul></li><li>成本低：<ul><li>普通机器组成的服务器集群</li></ul></li><li>高效率：<ul><li>通过分发数据，Hadoop可以在数据所在的节点上并行处理</li></ul></li><li>可靠性：<ul><li>Hadoop能自动维护数据的多份副本，并且在任务失败后能自动的重新部署计算任务，恢复数据</li></ul></li><li>并行读写数据<ul><li>一块硬盘的读写性能 &lt; 多块硬盘的读写性能</li><li>1HDD = 75 MB/sec</li><li>1000HDD = 75GB/sec</li></ul></li></ol><h2 id="解决问题及适用场景"><a href="#解决问题及适用场景" class="headerlink" title="解决问题及适用场景"></a>解决问题及适用场景</h2><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>海量数据的存储（HDFS)<ul><li>可动态新增机器提升空间</li><li>自动备份，默认备份3份，在可配置文件中修改备份数</li></ul></li><li>海量数据的分析（MapReduce）<ul><li>分而治之，比如分析100G数据通过多台节点来并行分析处理</li></ul></li><li>资源管理调度（YARN）<ul><li>集群之间内存调度</li></ul></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>擅长日志分析</li><li>基于海量数据的在线应用</li><li>推荐系统</li><li>计算广告</li><li>复杂算法</li><li>网盘</li><li>搜索引擎</li></ol><h2 id="Hadoop部署方式"><a href="#Hadoop部署方式" class="headerlink" title="Hadoop部署方式"></a>Hadoop部署方式</h2><ol><li>本地模式</li><li>伪分布模式<ul><li>关闭防火墙</li><li>修改IP</li><li>修改hostname</li><li>设置ssh自动登录</li><li>安装jdk</li><li>安装hadoop</li></ul></li><li>集群模式</li></ol><h2 id="思考：如何解决海量数据的存储？"><a href="#思考：如何解决海量数据的存储？" class="headerlink" title="思考：如何解决海量数据的存储？"></a>思考：如何解决海量数据的存储？</h2><h2 id="初始化HDFS"><a href="#初始化HDFS" class="headerlink" title="初始化HDFS"></a>初始化HDFS</h2><h3 id="使用之前需要进行格式化分布式系统"><a href="#使用之前需要进行格式化分布式系统" class="headerlink" title="使用之前需要进行格式化分布式系统"></a>使用之前需要进行格式化分布式系统</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// hadoop namenode -<span class="built_in">format</span>  已被下面的命令代替，也可使用</div><div class="line">hdfs namenode -<span class="built_in">format</span></div></pre></td></tr></table></figure><p>第一次需要格式化，以后不需要经常格式化，否则之前的数据就会丢失。</p><h3 id="启动HDFS和YARN"><a href="#启动HDFS和YARN" class="headerlink" title="启动HDFS和YARN"></a>启动HDFS和YARN</h3><p>ls  sbin</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FederationStateStore    refresh-namenodes<span class="selector-class">.sh</span>    start-yarn<span class="selector-class">.cmd</span>        stop-secure-dns<span class="selector-class">.sh</span></div><div class="line">distribute-exclude<span class="selector-class">.sh</span>    start-all<span class="selector-class">.cmd</span>        start-yarn<span class="selector-class">.sh</span>        stop-yarn<span class="selector-class">.cmd</span></div><div class="line">hadoop-daemon<span class="selector-class">.sh</span>    start-all<span class="selector-class">.sh</span>        stop-all<span class="selector-class">.cmd</span>        stop-yarn<span class="selector-class">.sh</span></div><div class="line">hadoop-daemons<span class="selector-class">.sh</span>    start-balancer<span class="selector-class">.sh</span>    stop-all<span class="selector-class">.sh</span>        workers<span class="selector-class">.sh</span></div><div class="line">httpfs<span class="selector-class">.sh</span>        start-dfs<span class="selector-class">.cmd</span>        stop-balancer<span class="selector-class">.sh</span>    yarn-daemon<span class="selector-class">.sh</span></div><div class="line">kms<span class="selector-class">.sh</span>            start-dfs<span class="selector-class">.sh</span>        stop-dfs<span class="selector-class">.cmd</span>        yarn-daemons<span class="selector-class">.sh</span></div><div class="line">mr-jobhistory-daemon<span class="selector-class">.sh</span>    start-secure-dns<span class="selector-class">.sh</span>    stop-dfs.sh</div></pre></td></tr></table></figure><p>调用start-xx.sh 启动。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">xxx</span><span class="selector-pseudo">:sbin</span> <span class="selector-tag">xxx</span>&amp; <span class="selector-tag">start-all</span><span class="selector-class">.sh</span> 这个脚本现在已经不赞成使用，以后可能要分别启动</div></pre></td></tr></table></figure></p><p>通过浏览器验证：</p><ol><li><a href="http://localhost:50070" target="_blank" rel="external">http://localhost:50070</a> (hdfs 管理界面）</li><li><a href="http://localhost:8088" target="_blank" rel="external">http://localhost:8088</a> (yarn 管理界面)</li></ol><p>调用stop-xx.sh 关闭。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx:sbin xxx&amp; <span class="keyword">stop</span>-<span class="keyword">all</span>.<span class="keyword">sh</span> 这个脚本现在已经不赞成使用，以后可能要分别关闭</div></pre></td></tr></table></figure></p><h3 id="jps查看进程"><a href="#jps查看进程" class="headerlink" title="jps查看进程"></a>jps查看进程</h3><p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令。<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">34148 </span>NameNode</div><div class="line"><span class="symbol">22933 </span>Launcher</div><div class="line"><span class="symbol">34681 </span>NodeManager</div><div class="line"><span class="symbol">34585 </span>ResourceManager</div><div class="line"><span class="symbol">34394 </span>SecondaryNameNode</div><div class="line"><span class="symbol">34253 </span>DataNode</div><div class="line"><span class="symbol">34750 </span>Jps</div></pre></td></tr></table></figure></p><ol><li><code>ResourceManager</code> 是 <code>yarn</code> 的管理者，<code>yarn</code> 负责资源调度，<code>NodeManager</code> 可以有很多个，负责存储数据。</li><li><code>NameNode</code> 是 <code>hdfs</code> 的管理者，<code>hdfs</code>，<code>DataNode</code> 负责存储数据 ，<code>SecondaryNameNode</code> 协助 <code>NameNode</code> 完成元数据同步。</li></ol><h2 id="测试HDFS"><a href="#测试HDFS" class="headerlink" title="测试HDFS"></a>测试HDFS</h2><h3 id="上传文件到HDFS"><a href="#上传文件到HDFS" class="headerlink" title="上传文件到HDFS"></a>上传文件到HDFS</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop fs -<span class="built_in">put</span> 上传文件路径名 hdfs:<span class="comment">//本机地址:9000/上传文件夹名</span></div></pre></td></tr></table></figure><p>什么都没有输出，说明上传文件成功。</p><h3 id="从HDFS下载文件"><a href="#从HDFS下载文件" class="headerlink" title="从HDFS下载文件"></a>从HDFS下载文件</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop fs -<span class="keyword">get</span> hdfs:<span class="comment">//本机地址:9000/上传文件夹名 下载到本地路径</span></div></pre></td></tr></table></figure><p>什么都没有输出，说明下载文件成功。</p><h2 id="配置ssh免登录"><a href="#配置ssh免登录" class="headerlink" title="配置ssh免登录"></a>配置ssh免登录</h2><h2 id="测试MR和YARN"><a href="#测试MR和YARN" class="headerlink" title="测试MR和YARN"></a>测试MR和YARN</h2><p>MR 架包</p><blockquote><p>cd hadoop路径/share/hadoop/mapreduce<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">hadoop-mapreduce-client-app-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-common-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-core-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-hs-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-hs-plugins-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-jobclient-3</span><span class="selector-class">.0</span><span class="selector-class">.0-tests</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-jobclient-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-nativetask-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-client-shuffle-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">hadoop-mapreduce-examples-3</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></div><div class="line"><span class="selector-tag">jdiff</span></div><div class="line"><span class="selector-tag">lib-examples</span></div><div class="line"><span class="selector-tag">sources</span></div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Hadoop&quot;&gt;&lt;a href=&quot;#什么是Hadoop&quot; class=&quot;headerlink&quot; title=&quot;什么是Hadoop?&quot;&gt;&lt;/a&gt;什么是Hadoop?&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;开源，可靠的，可扩展的分布式计算开发开源软件；&lt;/li&gt;
&lt;li&gt;作
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://github.com/songMW/stack.github.io/categories/Hadoop/"/>
    
      <category term="Hadoop for mac" scheme="https://github.com/songMW/stack.github.io/categories/Hadoop/Hadoop-for-mac/"/>
    
    
      <category term="hadoop" scheme="https://github.com/songMW/stack.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>socket</title>
    <link href="https://github.com/songMW/stack.github.io/2018/03/05/Objective-C/socket/"/>
    <id>https://github.com/songMW/stack.github.io/2018/03/05/Objective-C/socket/</id>
    <published>2018-03-05T08:01:20.000Z</published>
    <updated>2018-03-05T08:01:20.829Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>StaticLibraryAndFramework</title>
    <link href="https://github.com/songMW/stack.github.io/2018/02/28/Objective-C/StaticLibraryAndFramework/"/>
    <id>https://github.com/songMW/stack.github.io/2018/02/28/Objective-C/StaticLibraryAndFramework/</id>
    <published>2018-02-28T10:32:15.000Z</published>
    <updated>2018-02-28T10:56:08.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何制作静态库，动态库及它们之间的区别是什么？"><a href="#如何制作静态库，动态库及它们之间的区别是什么？" class="headerlink" title="如何制作静态库，动态库及它们之间的区别是什么？"></a>如何制作静态库，动态库及它们之间的区别是什么？</h2><p>省略若干字。。。</p><h2 id="静态库包含第三方静态库"><a href="#静态库包含第三方静态库" class="headerlink" title="静态库包含第三方静态库"></a>静态库包含第三方静态库</h2><ol><li>制作好自己的静态库；</li><li>将第三方静态库的头文件添加到制作好的静态库中；.a不要添加进来，否则会编译不成功。</li><li>将自己制作好的.a和第三方.a文件同时添加到工程即可。</li><li>如果有资源文件也一并添加到工程中。</li></ol><h2 id="静态库包含第三方动态库"><a href="#静态库包含第三方动态库" class="headerlink" title="静态库包含第三方动态库"></a>静态库包含第三方动态库</h2><h2 id="动态库包含第三方动态库"><a href="#动态库包含第三方动态库" class="headerlink" title="动态库包含第三方动态库"></a>动态库包含第三方动态库</h2><h2 id="动态库包含第三方静态库"><a href="#动态库包含第三方静态库" class="headerlink" title="动态库包含第三方静态库"></a>动态库包含第三方静态库</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何制作静态库，动态库及它们之间的区别是什么？&quot;&gt;&lt;a href=&quot;#如何制作静态库，动态库及它们之间的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;如何制作静态库，动态库及它们之间的区别是什么？&quot;&gt;&lt;/a&gt;如何制作静态库，动态库及它们之间的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WIFI热点开发</title>
    <link href="https://github.com/songMW/stack.github.io/2017/12/08/Objective-C/WIFI%E7%83%AD%E7%82%B9%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/songMW/stack.github.io/2017/12/08/Objective-C/WIFI热点开发/</id>
    <published>2017-12-08T10:17:47.000Z</published>
    <updated>2018-03-01T07:20:55.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跳转到设置页面"><a href="#跳转到设置页面" class="headerlink" title="跳转到设置页面"></a>跳转到设置页面</h2><p>info.plist 中添加 URL types 并设置 URL Schemes<br>string 类型 prefs<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"prefs:root=WIFI"</span>];</div><div class="line"><span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:url])</div><div class="line">&#123;</div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="弹出WIFI提示框"><a href="#弹出WIFI提示框" class="headerlink" title="弹出WIFI提示框"></a>弹出WIFI提示框</h2><ol><li>键名：Application uses Wi-Fi 值：YES；</li><li>键名：SBUsesNetwork 值：3；</li><li>iOS9需要向苹果申请授权 <a href="https://developer.apple.com//contact/network-extension" target="_blank" rel="external">苹果授权地址</a>；</li><li>iOS9以下由于受苹果系统限制，不能获取到和设置列表中那样的 WIFI 列表，采用上传当前地理位置从服务器获取开放热点。</li></ol><h2 id="iOS9以下安装描述文件实现："><a href="#iOS9以下安装描述文件实现：" class="headerlink" title="iOS9以下安装描述文件实现："></a>iOS9以下安装描述文件实现：</h2><ol><li>描述文件其实就是 XML 格式的数据；</li><li>下载一个 Apple Configurator2可以自己制作描述文件；</li><li>用文本编辑打开.mobileconfig文件给服务器,他们会按照这个格式来做描述文件；</li><li>需要注意一点是PayloadUUID这个参数是需要客户端上传的,保证应用的唯一性；</li><li><a href="">描述文件签名</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跳转到设置页面&quot;&gt;&lt;a href=&quot;#跳转到设置页面&quot; class=&quot;headerlink&quot; title=&quot;跳转到设置页面&quot;&gt;&lt;/a&gt;跳转到设置页面&lt;/h2&gt;&lt;p&gt;info.plist 中添加 URL types 并设置 URL Schemes&lt;br&gt;string
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="WIFI热点开发" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/WIFI%E7%83%AD%E7%82%B9%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>URL到页面加载</title>
    <link href="https://github.com/songMW/stack.github.io/2017/11/26/Objective-C/Other/URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD/"/>
    <id>https://github.com/songMW/stack.github.io/2017/11/26/Objective-C/Other/URL到页面加载/</id>
    <published>2017-11-26T03:05:05.000Z</published>
    <updated>2018-03-01T07:24:49.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用-stackoverflow-："><a href="#引用-stackoverflow-：" class="headerlink" title="引用 stackoverflow ："></a>引用 <code>stackoverflow</code> ：</h2><p><a href="http://stackoverflow.com/questions/2092527/what-happens-when-you-type-in-a-url-in-browser" target="_blank" rel="external">stackoverflow</a></p><ol><li><p>browser checks cache; if requested object is in cache and is fresh, skip to #9<br>浏览器检查缓存，若缓存中存储着要请求的内容，并且内容是最新的，直接跳转到第9步；</p></li><li><p>browser asks OS for server’s IP address<br>浏览器请求操作系统（OS）解析服务器的IP地址；</p></li><li><p>OS makes a DNS lookup and replies the IP address to the browser<br>操作系统做DNS解析，查找并返回IP地址给浏览器；</p></li><li><p>browser opens a TCP connection to server (this step is much more complex with HTTPS)<br>浏览器与服务器建立TCP连接（若使用的是https协议，连接过程会更加的复杂）；</p></li><li><p>browser sends the HTTP request through TCP connection<br>浏览器通过TCP连接发送http请求；</p></li><li><p>browser receives HTTP response and may close the TCP connection, or reuse it for another request<br>浏览器接收HTTP响应并且可以关闭TCP连接，或者将其重用于另一个请求；</p></li><li><p>browser checks if the response is a redirect (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx)<br>浏览器检查响应是否是重定向（3xx结果状态代码),授权请求(401),错误（4xx和5xx)等; 这些处理不同于正常响应(2xx）；</p></li><li><p>if cacheable, response is stored in cache<br>如果可高速缓存，则将响应存储在高速缓存中；</p></li><li><p>browser decodes response (e.g. if it’s gzipped)<br>浏览器解码响应（例如，如果是gzip压缩）；</p></li><li><p>browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?)<br>浏览器决定如何处理响应（例如，它是一个HTML页面，它是一个图像，它是一个声音剪辑?）；</p></li><li><p>browser renders response, or offers a download dialog for unrecognized types<br>浏览器呈现响应，或为无法识别的类型提供下载对话框。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用-stackoverflow-：&quot;&gt;&lt;a href=&quot;#引用-stackoverflow-：&quot; class=&quot;headerlink&quot; title=&quot;引用 stackoverflow ：&quot;&gt;&lt;/a&gt;引用 &lt;code&gt;stackoverflow&lt;/code&gt; ：&lt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="URL到页面加载" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>图片类型</title>
    <link href="https://github.com/songMW/stack.github.io/2017/11/21/Objective-C/Image/ImageType/"/>
    <id>https://github.com/songMW/stack.github.io/2017/11/21/Objective-C/Image/ImageType/</id>
    <published>2017-11-21T04:03:34.000Z</published>
    <updated>2018-03-01T07:20:11.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h2><a id="more"></a><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *image = <span class="string">@"xxx.png"</span>;</div><div class="line"><span class="built_in">NSString</span> *extension = image.pathExtension.lowercaseString;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,extension);</div></pre></td></tr></table></figure><p>只适用于可以获取到图片URL的时候</p><h2 id="取出图片数据的第一个字节"><a href="#取出图片数据的第一个字节" class="headerlink" title="取出图片数据的第一个字节"></a>取出图片数据的第一个字节</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle]pathForResource:<span class="string">@"414x736"</span> ofType:<span class="string">@"png"</span>];</div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</div><div class="line">uint8_t c;</div><div class="line">[data getBytes:&amp;c length: <span class="number">1</span>];</div><div class="line"><span class="keyword">switch</span> (c) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0xFF</span>:</div><div class="line">        <span class="keyword">return</span> SDImageFormatJPEG;</div><div class="line">    <span class="keyword">case</span> <span class="number">0x89</span>:</div><div class="line">        <span class="keyword">return</span> SDImageFormatPNG;</div><div class="line">    <span class="keyword">case</span> <span class="number">0x47</span>:</div><div class="line">        <span class="keyword">return</span> SDImageFormatGIF;</div><div class="line">    <span class="keyword">case</span> <span class="number">0x49</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">0x4D</span>:</div><div class="line">        <span class="keyword">return</span> SDImageFormatTIFF;</div><div class="line">    <span class="keyword">case</span> <span class="number">0x52</span>: &#123;</div><div class="line">        <span class="keyword">if</span> (data.length &gt;= <span class="number">12</span>) &#123;</div><div class="line">            <span class="comment">//RIFF....WEBP</span></div><div class="line">            <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">12</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</div><div class="line">            <span class="keyword">if</span> ([testString hasPrefix:<span class="string">@"RIFF"</span>] &amp;&amp; [testString hasSuffix:<span class="string">@"WEBP"</span>]) &#123;</div><div class="line">                <span class="keyword">return</span> SDImageFormatWebP;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> <span class="number">0x00</span>: &#123;</div><div class="line">        <span class="keyword">if</span> (data.length &gt;= <span class="number">12</span>) &#123;</div><div class="line">            <span class="comment">//....ftypheic ....ftypheix ....ftyphevc ....ftyphevx</span></div><div class="line">            <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">4</span>, <span class="number">8</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</div><div class="line">            <span class="keyword">if</span> ([testString isEqualToString:<span class="string">@"ftypheic"</span>] ||</div><div class="line">                [testString isEqualToString:<span class="string">@"ftypheix"</span>] ||</div><div class="line">                [testString isEqualToString:<span class="string">@"ftyphevc"</span>] ||</div><div class="line">                [testString isEqualToString:<span class="string">@"ftyphevx"</span>]) &#123;</div><div class="line">                <span class="keyword">return</span> SDImageFormatHEIC;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>类型参考SDWebImage。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取扩展名&quot;&gt;&lt;a href=&quot;#获取扩展名&quot; class=&quot;headerlink&quot; title=&quot;获取扩展名&quot;&gt;&lt;/a&gt;获取扩展名&lt;/h2&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/"/>
    
      <category term="imageType" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/imageType/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>ImageI/O</title>
    <link href="https://github.com/songMW/stack.github.io/2017/11/08/Objective-C/Image/ImageI:O/"/>
    <id>https://github.com/songMW/stack.github.io/2017/11/08/Objective-C/Image/ImageI:O/</id>
    <published>2017-11-08T11:24:01.000Z</published>
    <updated>2018-03-01T07:20:00.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Image-I-O-基础"><a href="#使用Image-I-O-基础" class="headerlink" title="使用Image I/O 基础"></a>使用Image I/O 基础</h2><p><code>ImageI/O framework</code>  提供从源图像 <code>CGImageSourceRef</code> 读取数据的不透明的数据类型并且写入图片数据到目的地 <code>CGImageDestinationRef</code>。它支持多种图像格式，包括标准的Web格式、高动态范围的图像和原始的摄像机数据。</p><ul><li>一个URL被认为是 <code>Core Foundation</code> 的数据类型 <code>CFURLRef : A reference to a CFURL object.</code>;</li><li><code>Core Foundation</code> 的对象 <code>CFDataRef</code> 和 <code>CFMutableDataRef</code>;</li><li>data consumer  对象<code>CGDataConsumerRef : An abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.</code> 和 数据提供对象 <code>CGDataProviderRef:</code> 抽象的数据读取任务，不用管理内存缓存;</li></ul><p>CGDataProviderRef：来自 <code>CFTypeRef</code> 并继承了所有 <code>Core Foundation</code> 的所有共有属性</p><blockquote><p>typedef struct CF_BRIDGED_TYPE(id) CGDataProvider *CGDataProviderRef;</p></blockquote><p>CFTypeRef ：<code>Core Foundation</code> 的基础类型，在多态函数中被用作类型和返回值，是一个通用的对象引用，充当其他<code>Core Foundation</code> 对象的占位符</p><blockquote><p>/<em> Base “type” of all “CF objects”, and polymorphic functions on them </em>/<br>typedef const CF_BRIDGED_TYPE(id) void * CFTypeRef;</p></blockquote><h2 id="工程中使用Image-I-O"><a href="#工程中使用Image-I-O" class="headerlink" title="工程中使用Image I/O"></a>工程中使用Image I/O</h2><blockquote><p> #import <imageio imageio.h=""></imageio></p></blockquote><h2 id="支持的图片类型"><a href="#支持的图片类型" class="headerlink" title="支持的图片类型"></a>支持的图片类型</h2><p><code>ImageI/O framework</code>  支持大多数常见的图片文件格式，比如： JPEG, JPEG2000, RAW, TIFF, BMP, and PNG</p><h3 id="获取最新的I-O支持的图片列表"><a href="#获取最新的I-O支持的图片列表" class="headerlink" title="获取最新的I/O支持的图片列表"></a>获取最新的I/O支持的图片列表</h3><ul><li><code>CGImageSourceCopyTypeIdentifiers</code> 返回一个 <code>UTIs</code> 数组是 <code>ImageI/O</code> 支持的图片来源</li><li><code>CGImageDestinationCopyTypeIdentifiers</code>  返回一个 <code>UTIs</code> 数组是 <code>ImageI/O</code> 支持的图片目标</li></ul><p>Getting and printing supported UTIs：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CFArrayRef mySourceTypes = CGImageSourceCopyTypeIdentifiers()<span class="comment">;</span></div><div class="line">CFShow(<span class="name">mySourceTypes</span>)<span class="comment">;</span></div><div class="line">CFArrayRef myDestinationTypes = CGImageDestinationCopyTypeIdentifiers()<span class="comment">;</span></div><div class="line">CFShow(<span class="name">myDestinationTypes</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>UTLs 和 图片内容类型常量</p><table><thead><tr><th>Uniform type identifier</th><th style="text-align:right">Image content type constant</th></tr></thead><tbody><tr><td>public.image</td><td style="text-align:right">kUTTypeImage</td></tr><tr><td>public.png</td><td style="text-align:right">kUTTypePNG</td></tr><tr><td>public.jpeg</td><td style="text-align:right">kUTTypeJPEG</td></tr><tr><td>public.jpeg-2000 (OS X only)</td><td style="text-align:right">kUTTypeJPEG2000</td></tr><tr><td>public.tiff</td><td style="text-align:right">kUTTypeTIFF</td></tr><tr><td>com.apple.pict (OS X only)</td><td style="text-align:right">kUTTypePICT</td></tr><tr><td>com.compuserve.gif</td><td style="text-align:right">kUTTypeGIF</td></tr></tbody></table><h2 id="实现图片渐进式"><a href="#实现图片渐进式" class="headerlink" title="实现图片渐进式"></a>实现图片渐进式</h2><p>总结步骤：</p><ol><li>获取图片 NSData 数据；</li><li>调用 <code>CGImageSourceCreateIncremental</code> 方法创建增量图片源；</li><li>根据获取到的 NSData 创建 CFData 对象；</li><li>调用 <code>CGImageSourceUpdateData</code>  来更新图片。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.data = [<span class="built_in">NSMutableData</span> data];</div><div class="line">    _loadFinished = <span class="literal">NO</span>;</div><div class="line">    _dataLength = <span class="number">0</span>;</div><div class="line"></div><div class="line">    _sourceRef = <span class="built_in">CGImageSourceCreateIncremental</span>(<span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)loadImageWithUrl</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:imageURL];</div><div class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration] delegate:<span class="keyword">self</span> delegateQueue:[[<span class="built_in">NSOperationQueue</span> alloc]init]];</div><div class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithURL:url];</div><div class="line">    [task resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.data appendData:data];</div><div class="line">    _loadFinished = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> (_dataLength == dataTask.response.expectedContentLength) &#123;</div><div class="line">        _loadFinished = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    _dataLength = dataTask.countOfBytesReceived;</div><div class="line">    [<span class="keyword">self</span> showImage:<span class="keyword">self</span>.data];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)showImage:(<span class="built_in">NSData</span> *)data</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CFDataRef</span> dataRef = (__bridge <span class="built_in">CFDataRef</span>)data;</div><div class="line">    <span class="built_in">CGImageSourceUpdateData</span>(_sourceRef, dataRef, _loadFinished);</div><div class="line">    <span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(_sourceRef, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">self</span>.showImageView.image = [<span class="built_in">UIImage</span> imageWithCGImage:imageRef];</div><div class="line">        <span class="built_in">CGImageRelease</span>(imageRef);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>到此应该就可以看到效果。<br>注意点：</p><ul><li>使用<code>CGImageSourceCreateImageAtIndex</code> 创建  <code>CGImageRef</code> 对象，需要手动释放，否则内存会骤增；</li><li>需要在主线程中更新UI。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用Image-I-O-基础&quot;&gt;&lt;a href=&quot;#使用Image-I-O-基础&quot; class=&quot;headerlink&quot; title=&quot;使用Image I/O 基础&quot;&gt;&lt;/a&gt;使用Image I/O 基础&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ImageI/O framewo
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/"/>
    
      <category term="ImageI/O" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/ImageI-O/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>google人机验证</title>
    <link href="https://github.com/songMW/stack.github.io/2017/10/10/Objective-C/Other/google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81/"/>
    <id>https://github.com/songMW/stack.github.io/2017/10/10/Objective-C/Other/google人机验证/</id>
    <published>2017-10-10T02:22:00.000Z</published>
    <updated>2018-03-01T07:24:33.791Z</updated>
    
    <content type="html"><![CDATA[<p>使用翻墙工具时有时会弹出人机验证的界面，很是麻烦，网上搜到一个解决方法总结如下：</p><blockquote><p>在谷歌浏览器地址栏输入recaptcha回车<br>跳到人机身份验证页面，打上√，确定就行了！<br>以后再出现人机验证只需打个勾就行了！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用翻墙工具时有时会弹出人机验证的界面，很是麻烦，网上搜到一个解决方法总结如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在谷歌浏览器地址栏输入recaptcha回车&lt;br&gt;跳到人机身份验证页面，打上√，确定就行了！&lt;br&gt;以后再出现人机验证只需打个勾就行了！&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="google人机验证" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>ImageI/O编解码</title>
    <link href="https://github.com/songMW/stack.github.io/2017/10/09/Objective-C/Image/ImageI-O%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>https://github.com/songMW/stack.github.io/2017/10/09/Objective-C/Image/ImageI-O编解码/</id>
    <published>2017-10-09T10:56:07.000Z</published>
    <updated>2018-03-01T07:19:46.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><p>将已经编码后的图像数据格式转化为可以被渲染的数据。<br>Image/IO的解码，支持了常见的图像格式，包括PNG、APNG、JPEG、GIF、BMP、TIFF <code>CGImageSourceCopyTypeIdentifiers</code> 可以获取支持的图像格式。<br>在iOS 11之后支持了HEIC（即使用了HEVC编码的HEIF格式）。</p><h2 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h2><p>静态图的解码步骤：</p><ol><li>创建CGImageSource；</li><li>读取图像格式元数据；</li><li>解码得到CGImage；</li><li>生成上层的UIImage，清理。<br>创建CGImageSource<br>CGImageSouce，表示的是一个待解码数据的输入。</li></ol><ul><li>CGImageSourceCreateWithData： 二进制数据（CGData）中创建ImageSource；</li><li>CGImageSourceCreateWithURL： 指定一个URL创建ImageSource；</li><li>CGImageSourceCreateWithDataProvider：从DataProvide中创建ImageSource，DataProvider提供了很多种输入，包括内存，文件，网络，流等。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle]pathForResource:<span class="string">@"14444473,2560,1600"</span> ofType:<span class="string">@"jpg"</span>];</div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</div><div class="line"></div><div class="line"><span class="built_in">CFDataRef</span> dataRef = (__bridge <span class="built_in">CFDataRef</span>)data;</div><div class="line"><span class="comment">// 创建CGImageSource</span></div><div class="line"><span class="built_in">CGImageSourceRef</span> sourceRef = <span class="built_in">CGImageSourceCreateWithData</span>(dataRef, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">NSAssert</span>(sourceRef != <span class="literal">nil</span>, <span class="string">@"sourceRef is nil"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 读取图像格式元数据</span></div><div class="line"><span class="built_in">NSDictionary</span> *imageProperties = (__bridge <span class="built_in">NSDictionary</span> *)<span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(sourceRef, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"获取属性列表：%@"</span>, imageProperties);</div><div class="line"><span class="built_in">NSUInteger</span> width = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyPixelWidth] unsignedIntegerValue];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"图片宽：%@"</span>, @(width));</div><div class="line"><span class="built_in">NSUInteger</span> height = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyPixelHeight] unsignedIntegerValue];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"图片高：%@"</span>, @(height));</div><div class="line"><span class="built_in">BOOL</span> hasAlpha = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyHasAlpha] boolValue];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"是否含有Alpha通道：%@"</span>, @(hasAlpha));</div><div class="line"><span class="comment">//图像格式：CGImageSourceGetType</span></div><div class="line"><span class="built_in">CFStringRef</span> stringRef = <span class="built_in">CGImageSourceGetType</span>(sourceRef);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"图像格式：%@"</span>, (__bridge <span class="built_in">NSString</span> *)stringRef);</div><div class="line"><span class="comment">//图像数量（动图）：CGImageSourceGetCount</span></div><div class="line">size_t t = <span class="built_in">CGImageSourceGetCount</span>(sourceRef);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"图像数量：%zu"</span>, t);</div><div class="line"></div><div class="line"><span class="comment">// 解码得到CGImage</span></div><div class="line"><span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(sourceRef, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// 生成UIImage</span></div><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithCGImage:imageRef];</div><div class="line"><span class="keyword">self</span>.showImageView.image = image;</div><div class="line"><span class="built_in">CGImageRelease</span>(imageRef);</div><div class="line"><span class="built_in">CFRelease</span>(sourceRef);</div></pre></td></tr></table></figure></li></ul><p>注意点：</p><ol><li><code>CGImageSourceCreateImageAtIndex</code> 对于静态图 index 传0；</li><li><code>CGImageSourceCopyPropertiesAtIndex</code>  获取图片的元信息</li><li>释放</li></ol><h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><ol><li>创建CGImageSource ；</li><li>使用<code>CGImageSourceGetCount</code>获取到图片的帧数；</li><li>循环遍历每一帧，循环静态图2～4步骤<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:dynamicImageURL];</div><div class="line"><span class="built_in">CGImageSourceRef</span> sourcesRef = <span class="built_in">CGImageSourceCreateWithURL</span>((__bridge_retained <span class="built_in">CFURLRef</span>)url, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// 获取图片帧数</span></div><div class="line">size_t count = <span class="built_in">CGImageSourceGetCount</span>(sourcesRef);</div><div class="line"><span class="built_in">NSMutableArray</span>&lt;<span class="built_in">UIImage</span> *&gt; *images = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"><span class="keyword">double</span> totalDuration = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line"><span class="built_in">NSDictionary</span> *propertiesDict = (__bridge_transfer <span class="built_in">NSDictionary</span> *)<span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(sourcesRef, i, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">NSDictionary</span> *gitPropertiesDict = propertiesDict[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFDictionary];</div><div class="line"><span class="keyword">double</span> duration = [gitPropertiesDict[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFUnclampedDelayTime] doubleValue]; <span class="comment">// GIF原始的帧持续时长，秒数</span></div><div class="line">totalDuration += duration;</div><div class="line"><span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(sourcesRef, i, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">UIImage</span> *image  = [<span class="built_in">UIImage</span> imageWithCGImage:imageRef];</div><div class="line">[images addObject:image];</div><div class="line"><span class="built_in">CGImageRelease</span>(imageRef);</div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>.showImageView.image = [<span class="built_in">UIImage</span> animatedImageWithImages:images duration:totalDuration];</div></pre></td></tr></table></figure></li></ol><p>UIImage这个animatedImages的接口，会根据传入的images的数量，平均分配传入的totalDuration的展示时长</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>指的就是将一个UIImage表示的图像，编码为对应图像格式的数据，输出NSData的过程。Image/IO提供的对应概念，叫做CGImageDestination，表示一个输出。之后的编码相关的操作与Destination对应。</p><h2 id="静态图-1"><a href="#静态图-1" class="headerlink" title="静态图"></a>静态图</h2><p>静态图编码步骤：</p><ol><li>创建CGImageDestination；</li><li>添加图像格式元数据（可选）和CGImage；</li><li>编码得到NSData。</li></ol><p>创建 CGImageDestination：</p><ol><li><code>CGImageDestinationCreateWithURL</code></li><li><code>CGImageDestinationCreateWithData</code></li><li><code>CGImageDestinationCreateWithDataConsumer</code></li></ol><p>添加图片到CGImageDestination</p><ol><li><code>CGImageDestinationAddImage</code></li><li><code>CGImageDestinationAddImageFromSource</code></li></ol><p>验证是否添加完成<br>使用<code>CGImageDestinationFinalize</code>验证图片是否添加完成，一旦完成后就不能向图片添加更多的数据。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h2 id="动态图-1"><a href="#动态图-1" class="headerlink" title="动态图"></a>动态图</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解码&quot;&gt;&lt;a href=&quot;#解码&quot; class=&quot;headerlink&quot; title=&quot;解码&quot;&gt;&lt;/a&gt;解码&lt;/h1&gt;&lt;p&gt;将已经编码后的图像数据格式转化为可以被渲染的数据。&lt;br&gt;Image/IO的解码，支持了常见的图像格式，包括PNG、APNG、JPEG、GI
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/"/>
    
      <category term="ImageI/O编解码" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/ImageI-O%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>图片压缩</title>
    <link href="https://github.com/songMW/stack.github.io/2017/10/02/Objective-C/Image/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    <id>https://github.com/songMW/stack.github.io/2017/10/02/Objective-C/Image/图片压缩/</id>
    <published>2017-10-02T08:31:06.000Z</published>
    <updated>2018-03-01T07:19:40.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PNG-和-JPEG（JPG）区别"><a href="#PNG-和-JPEG（JPG）区别" class="headerlink" title="PNG 和 JPEG（JPG）区别"></a>PNG 和 JPEG（JPG）区别</h2><ol><li>PNG 图片是无损压缩，并且支持 alpha 通道，</li><li>JPEG 图片是有损压缩，可以指定 0-100% 的压缩比；</li><li>苹果提供了两个函数用来生成 PNG 和 JPEG 图片：</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// <span class="built_in">return</span> <span class="built_in">image</span> as PNG. May <span class="built_in">return</span> nil <span class="keyword">if</span> <span class="built_in">image</span> has no CGImageRef <span class="keyword">or</span> invalid bitmap format</div><div class="line">UIKIT_EXTERN NSData * __nullable UIImagePNGRepresentation(UIImage * __nonnull <span class="built_in">image</span>);</div><div class="line"></div><div class="line">// <span class="built_in">return</span> <span class="built_in">image</span> as JPEG. May <span class="built_in">return</span> nil <span class="keyword">if</span> <span class="built_in">image</span> has no CGImageRef <span class="keyword">or</span> invalid bitmap format. compression <span class="built_in">is</span> <span class="number">0</span>(most)..<span class="number">1</span>(least)</div><div class="line">UIKIT_EXTERN NSData * __nullable UIImageJPEGRepresentation(UIImage * __nonnull <span class="built_in">image</span>, CGFloat compressionQuality);</div></pre></td></tr></table></figure><h2 id="图片为什么需要解压图片"><a href="#图片为什么需要解压图片" class="headerlink" title="图片为什么需要解压图片"></a>图片为什么需要解压图片</h2><p>图片的解压缩需要消耗大量的 CPU 时间，为什么需要将图片解压后才能展示到屏幕上呢？这里引入一个概念<a href="https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_images/dq_images.html#//apple_ref/doc/uid/TP30001066-CH212-SW3" target="_blank" rel="external">位图</a></p><blockquote><p>A bitmap image (or sampled image) is an array of pixels (or samples). Each pixel represents a single point in the image. JPEG, TIFF, and PNG graphics files are examples of bitmap images.<br> 位图就是一个数组，数组中每个元素代表图片中的一个点。</p></blockquote><h3 id="获取图片的原始数据"><a href="#获取图片的原始数据" class="headerlink" title="获取图片的原始数据"></a>获取图片的原始数据</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CFDataRef ref = CGDataProviderCopyData(<span class="name">CGImageGetDataProvider</span>(<span class="name">_image</span>.CGImage))<span class="comment">;</span></div></pre></td></tr></table></figure><h3 id="计算图片所占内存"><a href="#计算图片所占内存" class="headerlink" title="计算图片所占内存"></a>计算图片所占内存</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"320x480"</span>];</div><div class="line"><span class="built_in">CGFloat</span> cgImageBytesPerRow = <span class="built_in">CGImageGetBytesPerRow</span>(_image.CGImage); <span class="comment">// 2560</span></div><div class="line"><span class="built_in">CGFloat</span> cgImageHeight = <span class="built_in">CGImageGetHeight</span>(_image.CGImage); <span class="comment">// 960</span></div><div class="line"><span class="built_in">NSUInteger</span> size  = cgImageHeight * cgImageBytesPerRow;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"size:%lu"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)size); <span class="comment">// 输出 2457600 bytes</span></div></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFDataRef ref = CGDataProviderCopyData(<span class="name">CGImageGetDataProvider</span>(<span class="name">_image</span>.CGImage))<span class="comment">;</span></div><div class="line">NSLog(@<span class="string">"%@"</span>, ref)<span class="comment">; // 输出 2457600 bytes</span></div></pre></td></tr></table></figure><p>打印可以看出一张320*480的图片加载并成功展示到页面所占用的内存达到 2457600 / 1024 / 1024 大约有2.34375M。如果有很多张这样的图片，内存完全不够用。</p><p>这里位图和二进制不是一个概念。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><h3 id="等比压缩-常用"><a href="#等比压缩-常用" class="headerlink" title="等比压缩 常用"></a>等比压缩 常用</h3><p>使用场景：后台返回固定图片尺寸用于支持iOS和android，比如返回1920x1080大小的图片，如不压缩在iPhone的所有尺寸展示：</p><ol><li>全屏展示：图片展示不全；</li><li>指定其他大小尺寸展示：图片会失真</li></ol><p>此时需要按照等比压缩的方式来压缩图片：假定后台服务器返回图片的尺寸是固定的。<br>在程序中写定图片的宽和高：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> image_width 1080</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> image_height 1920</span></div></pre></td></tr></table></figure></p><p>按需求来设定图片展示大小，假设想要在width * height 大小的地方展示图片，如何计算压缩后图片的大小？</p><ol><li><p>定宽<br>图片宽：width<br>图片高：width * image_height / image_width</p></li><li><p>定高<br>图片宽：height * image_width / image_height<br>图片高：height<br>计算完成后在根据压缩后图片的大小来调整展示view的大小。<br>如果服务器返回的图片尺寸不是固定的也可以进行压缩，只是每次计算之前先要获取到图片，拿到图片的大小，过程一样。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PNG-和-JPEG（JPG）区别&quot;&gt;&lt;a href=&quot;#PNG-和-JPEG（JPG）区别&quot; class=&quot;headerlink&quot; title=&quot;PNG 和 JPEG（JPG）区别&quot;&gt;&lt;/a&gt;PNG 和 JPEG（JPG）区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;PNG 
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="Image" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/"/>
    
      <category term="图片压缩" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/Image/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>屏蔽浏览器广告</title>
    <link href="https://github.com/songMW/stack.github.io/2017/09/28/Objective-C/Other/%E5%B1%8F%E8%94%BD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B9%BF%E5%91%8A/"/>
    <id>https://github.com/songMW/stack.github.io/2017/09/28/Objective-C/Other/屏蔽浏览器广告/</id>
    <published>2017-09-28T10:27:10.000Z</published>
    <updated>2018-03-01T07:24:13.941Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>AdBlock Plus 屏蔽广告插件；</p></li><li><p>清除百度推广 www.baidu.com 底部”使用百度前必读”—&gt;隐私权保护声明–&gt;个性化配置–&gt;选择停用。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;AdBlock Plus 屏蔽广告插件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清除百度推广 www.baidu.com 底部”使用百度前必读”—&amp;gt;隐私权保护声明–&amp;gt;个性化配置–&amp;gt;选择停用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="屏蔽浏览器广告" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/%E5%B1%8F%E8%94%BD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B9%BF%E5%91%8A/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>堆和栈</title>
    <link href="https://github.com/songMW/stack.github.io/2017/09/15/Objective-C/Other/%E5%A0%86%E5%92%8C%E6%A0%88/"/>
    <id>https://github.com/songMW/stack.github.io/2017/09/15/Objective-C/Other/堆和栈/</id>
    <published>2017-09-15T10:09:25.000Z</published>
    <updated>2018-03-01T07:23:57.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈和堆存储在哪"><a href="#栈和堆存储在哪" class="headerlink" title="栈和堆存储在哪?"></a>栈和堆存储在哪?</h2><p>他们都存储在电脑的 RAM(Random Access Memory) 中</p><h2 id="栈和堆中都保存的是什么"><a href="#栈和堆中都保存的是什么" class="headerlink" title="栈和堆中都保存的是什么?"></a>栈和堆中都保存的是什么?</h2><ol><li>栈 —&gt;编译器在需要的时候分配，在不需要的时候自动清除变量的存储区，通常是局部变量，函数参数等；</li><li>堆 —&gt;由 new 分配的操作块，一个 new 对应一个 delete</li><li>自由存储区 —&gt;由 malloc 分配的内存块</li><li>全局/静态存储区 —&gt;全局变量和静态变量被分配到同一块内存中</li><li>常量存储区 —&gt;这时一块比较特殊的存储区，存放常量，不能修改<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]；</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>看到 new 说明分配了一块堆内存，那么指针 p 是什么? p 分配的是一块栈内存，这句意思是在栈内存中存放一个指向一块堆内容的指针 p。程序先会确定在堆中分配内存的大小，然后调用 operator new 分配内存，让后返回这块内存的首地址，放入栈中。</p><h2 id="栈和堆区别是什么"><a href="#栈和堆区别是什么" class="headerlink" title="栈和堆区别是什么?"></a>栈和堆区别是什么?</h2><ol><li>管理方式不同：对于栈来说，是由编译器自动管理，无需我们手动控制；对于堆来说，释放工作由程序员控制，容易产生 memory leak；</li><li>空间大小不同:栈空间大小是1M，而在32位系统下，堆内存空间可以达到4G；</li><li>产生碎片不同:对于堆来说，频繁的 new/delete 势必会造成内存空间的不连续，而从造成大量碎片，使程序效率降低；对栈来说，不会产生碎片问题，栈是先进后出的队列不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的栈内容已经弹出；</li><li>生长方式不同:对于堆来说，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来说，它的生长方向是向下的，是向着内存地址减少的方向增长；</li><li>分配方式不同:堆是动态分配，没有静态分配的堆；栈有2中分配方式:静态分配和动态分配，静态分配是编译器完成的，比如局部变量的分配；动态分配由 alloc 函数进行分配，由编译器进行释放；</li><li>分配效率不同:栈是机器系统提供的数据结构，计算机会在底层对栈提供支持:分配专门的寄存器存放栈地址，压栈出栈都有专门的指令执行，这就决定栈的效率比较高；堆是 C/C++函数提供的，例如分配一块内存，库函数会按照一定的算法在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间(可能由于内存碎片太多)，就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;栈和堆存储在哪&quot;&gt;&lt;a href=&quot;#栈和堆存储在哪&quot; class=&quot;headerlink&quot; title=&quot;栈和堆存储在哪?&quot;&gt;&lt;/a&gt;栈和堆存储在哪?&lt;/h2&gt;&lt;p&gt;他们都存储在电脑的 RAM(Random Access Memory) 中&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="堆和栈" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/%E5%A0%86%E5%92%8C%E6%A0%88/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>MPMoviePlayerViewController</title>
    <link href="https://github.com/songMW/stack.github.io/2017/08/22/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerViewController/"/>
    <id>https://github.com/songMW/stack.github.io/2017/08/22/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerViewController/</id>
    <published>2017-08-22T12:34:53.000Z</published>
    <updated>2018-03-01T07:19:02.169Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴上<a href="https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller" target="_blank" rel="external">官方文档</a></p><p>先看下头文件:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> <span class="attribute">MPMoviePlayerViewController </span>: UIViewController</div><div class="line"></div><div class="line">- (instancetype)<span class="attribute">initWithContentURL</span>:(NSURL *)contentURL NS_DESIGNATED_INITIALIZER;</div><div class="line"></div><div class="line"><span class="variable">@property</span> (nonatomic, readonly) MPMoviePlayerController *moviePlayer;</div><div class="line"></div><div class="line"><span class="variable">@end</span></div><div class="line"></div><div class="line"><span class="variable">@interface</span> UIViewController (MPMoviePlayerViewController)</div><div class="line"></div><div class="line">- (void)<span class="attribute">presentMoviePlayerViewControllerAnimated</span>:(MPMoviePlayerViewController *)moviePlayerViewController;</div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">dismissMoviePlayerViewControllerAnimated</span>;</div><div class="line"></div><div class="line">@<span class="selector-tag">end</span></div></pre></td></tr></table></figure></p><ul><li>MPMoviePlayerViewController 继承 UIViewController;</li><li>API很少, 主要是 moviePlayer 这个属性, 是对 MPMoviePlayerController 的一层封装;</li><li>当然也拥有 MPMoviePlayerController 的所有功能;</li><li>使用简单, 点击Done按钮会自动退出, 有进度条, 快进, 快退, 播放按钮.</li><li>可以去自定义添加控件到播放页面, 不建议这么做, 可以直接使用 MPMoviePlayerController</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MPMoviePlayerViewController *mpMovieController = <span class="string">[[MPMoviePlayerViewController alloc]initWithContentURL:[NSURL fileURLWithPath:videoPath]]</span>;</div><div class="line">[vc presentViewController:mpMovieController animated:YES completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先贴上&lt;a href=&quot;https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="AVFoundation" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/AVFoundation/"/>
    
      <category term="MoviePlayer" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/AVFoundation/MoviePlayer/"/>
    
      <category term="MPMoviePlayerViewController" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/AVFoundation/MoviePlayer/MPMoviePlayerViewController/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>DS_Store</title>
    <link href="https://github.com/songMW/stack.github.io/2017/08/16/Objective-C/Other/DS-Store/"/>
    <id>https://github.com/songMW/stack.github.io/2017/08/16/Objective-C/Other/DS-Store/</id>
    <published>2017-08-16T09:43:06.000Z</published>
    <updated>2018-03-01T07:24:22.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去"><a href="#DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去" class="headerlink" title=".DS_Store 是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去."></a>.DS_Store 是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去.</h2><ul><li>Mac 下隐藏显示.DS_Store 方法:<br>显示Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles -bool true</li><li>显示Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles YES</li><li>隐藏Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles -bool false</li><li>隐藏Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles NO</li><li>重启Finder：鼠标单击窗口左上角的苹果标志–&gt;强制退出–&gt;Finder–&gt;重新启动</li></ul><h2 id="设置忽略-DS-Store"><a href="#设置忽略-DS-Store" class="headerlink" title="设置忽略.DS_Store"></a>设置忽略.DS_Store</h2><ul><li>进入:/Users/xx/.subversion打开 config</li><li>搜索global-ignores 找到global-ignores = <em>.o </em>.lo <em>.la </em>.al .libs <em>.so </em>.so.[0-9]<em> </em>.a <em>.pyc </em>.pyo <em>.rej </em>~ #<em># .#</em> .*.swp .DS_Store  取消注解.</li></ul><h2 id="设置忽略-xcuserstate-确保global-ignores已经取消注解"><a href="#设置忽略-xcuserstate-确保global-ignores已经取消注解" class="headerlink" title="设置忽略.xcuserstate 确保global-ignores已经取消注解"></a>设置忽略.xcuserstate 确保global-ignores已经取消注解</h2><ul><li>进入:/Users/xx/.subversion打开 config</li><li>搜索enable-auto-props 取消注释</li><li>搜索[auto-props]在下面添加:<br><em>.mode</em>=svn:mime-type=text/X-xcode<br><em>.pbxuser=svn:mime-type=text/X-xcode</em>.perspective<em>=svn:mime-type=text/X-xcode</em>.pbxproj=svn:mime-type=text/X-xcode</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去&quot;&gt;&lt;a href=&quot;#DS-Store-是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="DS_Store" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/DS-Store/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>XcodeCommand</title>
    <link href="https://github.com/songMW/stack.github.io/2017/08/15/Objective-C/Other/XcodeCommand/"/>
    <id>https://github.com/songMW/stack.github.io/2017/08/15/Objective-C/Other/XcodeCommand/</id>
    <published>2017-08-15T10:09:25.000Z</published>
    <updated>2018-02-05T07:31:19.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PROJECT-DIR"><a href="#PROJECT-DIR" class="headerlink" title="${PROJECT_DIR}"></a>${PROJECT_DIR}</h2><blockquote><p>${PROJECT_DIR} = /path/AppName<br>/path ：当前工程所在路径<br>AppName：打开Xcode工程后显示的工程名称</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PROJECT-DIR&quot;&gt;&lt;a href=&quot;#PROJECT-DIR&quot; class=&quot;headerlink&quot; title=&quot;${PROJECT_DIR}&quot;&gt;&lt;/a&gt;${PROJECT_DIR}&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;${PROJECT_DIR} 
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="Other" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/"/>
    
      <category term="XcodeCommand" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/Other/XcodeCommand/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>MPMoviePlayerController</title>
    <link href="https://github.com/songMW/stack.github.io/2017/07/30/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerController/"/>
    <id>https://github.com/songMW/stack.github.io/2017/07/30/Objective-C/AVFoundation/MoviePlayer/MPMoviePlayerController/</id>
    <published>2017-07-30T03:38:30.000Z</published>
    <updated>2018-03-01T07:18:53.197Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴上<a href="https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller" target="_blank" rel="external">官方文档</a></p><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.moviePlayerController.view];</div><div class="line">    [<span class="keyword">self</span>.moviePlayerController.view makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.left.bottom.right.equalTo(<span class="keyword">self</span>.view);</div><div class="line">    &#125;];</div><div class="line">    [<span class="keyword">self</span>.moviePlayerController prepareToPlay];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">MPMoviePlayerController</span> *)moviePlayerController</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!_moviePlayerController) &#123;</div><div class="line">        _moviePlayerController = [[<span class="built_in">MPMoviePlayerController</span> alloc]init];</div><div class="line">        _moviePlayerController.fullscreen = <span class="literal">NO</span>;</div><div class="line">        _moviePlayerController.controlStyle = <span class="built_in">MPMovieControlStyleEmbedded</span>;</div><div class="line">        _moviePlayerController.scalingMode = <span class="built_in">MPMovieScalingModeAspectFit</span>;</div><div class="line">        [_moviePlayerController.view setTranslatesAutoresizingMaskIntoConstraints:<span class="literal">NO</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _moviePlayerController;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>_moviePlayerController.view 一定要添加到父视图上, 要不只有声音没有图片</li><li>MPMoviePlayerController 继承 NSObject <mpmediaplayback></mpmediaplayback></li><li><mpmediaplayback> 播放, 暂停, 停止, 准备播放的API</mpmediaplayback></li><li>视图刚呈现时底部显示: 暂停 进度条 全屏按钮</li><li>点击底部全屏按钮后会在顶部呈现: Done 进度条 退出全屏按钮</li></ul><h2 id="2-顶部-Done-和-退出全屏按钮的监测"><a href="#2-顶部-Done-和-退出全屏按钮的监测" class="headerlink" title="2. 顶部 Done 和 退出全屏按钮的监测"></a>2. 顶部 Done 和 退出全屏按钮的监测</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(doneButtonClick:) name:<span class="built_in">MPMoviePlayerWillExitFullscreenNotification</span> object:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doneButtonClick:(<span class="built_in">NSNotification</span> *)center</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.moviePlayerController.playbackState == <span class="built_in">MPMoviePlaybackStateStopped</span>) &#123;</div><div class="line">        <span class="comment">//说明是点击Done按钮</span></div><div class="line">        [<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.moviePlayerController.playbackState == <span class="built_in">MPMoviePlaybackStatePlaying</span>)&#123;</div><div class="line">        <span class="comment">//说明点击了右上角退出全屏按钮</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>注册 <code>MPMoviePlayerWillExitFullscreenNotification</code> 这个通知, 不管是点击Done还是退出全屏按钮都会接受到通知, 在通知的回调方法中可以根据 <code>playbackState</code> 这个属性来判断是点击那个按钮.</li><li>点击Done按钮时会暂停播放</li><li>点击退出全屏按钮则不会暂停播放</li></ul><h2 id="3-监听视频播放结束"><a href="#3-监听视频播放结束" class="headerlink" title="3. 监听视频播放结束"></a>3. 监听视频播放结束</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">addObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">selector</span>:@<span class="selector-tag">selector</span>(<span class="attribute">videoEndPlay</span>:) <span class="selector-tag">name</span><span class="selector-pseudo">:MPMoviePlayerPlaybackDidFinishNotification</span> <span class="selector-tag">object</span><span class="selector-pseudo">:nil</span>];</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">videoEndPlay</span><span class="selector-pseudo">:(NSNotification</span> *)<span class="selector-tag">sender</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"播放结束"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>自动播放完成后会调用</li><li>用户退出播放时会调用</li></ul><h2 id="4-监听当前视频播放状态"><a href="#4-监听当前视频播放状态" class="headerlink" title="4. 监听当前视频播放状态"></a>4. 监听当前视频播放状态</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(videoLoadStateDidChange:) name:<span class="built_in">MPMoviePlayerLoadStateDidChangeNotification</span> object:<span class="literal">nil</span>];</div><div class="line">- (<span class="keyword">void</span>)videoLoadStateDidChange:(<span class="built_in">NSNotification</span> *)sender</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Returns the network load state of the movie player</span></div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.moviePlayerController.loadState) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMovieLoadStatePlayable</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"加载完成,可以播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMovieLoadStatePlaythroughOK</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"缓冲完成，可以连续播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMovieLoadStateStalled</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"缓冲中"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMovieLoadStateUnknown</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"未知状态"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-监听当前视频-Playback-拖动进度条-播放-暂停-开启全屏-退出全屏也需要注册这个通知"><a href="#5-监听当前视频-Playback-拖动进度条-播放-暂停-开启全屏-退出全屏也需要注册这个通知" class="headerlink" title="5. 监听当前视频 Playback 拖动进度条, 播放, 暂停, 开启全屏, 退出全屏也需要注册这个通知"></a>5. 监听当前视频 Playback 拖动进度条, 播放, 暂停, 开启全屏, 退出全屏也需要注册这个通知</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(videoPlaybackDidChange:) name:<span class="built_in">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)videoPlaybackDidChange:(<span class="built_in">NSNotification</span> *)center</div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.moviePlayerController.playbackState) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMoviePlaybackStateStopped</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"停止播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMoviePlaybackStatePlaying</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"正在播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMoviePlaybackStatePaused</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"暂停播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMoviePlaybackStateInterrupted</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"中断播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMoviePlaybackStateSeekingForward</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"快进"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="built_in">MPMoviePlaybackStateSeekingBackward</span>:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"快退"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="7-上一首-下一首"><a href="#7-上一首-下一首" class="headerlink" title="7. 上一首, 下一首"></a>7. 上一首, 下一首</h2><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先贴上&lt;a href=&quot;https://developer.apple.com/documentation/mediaplayer/mpmovieplayercontroller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="AVFoundation" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/AVFoundation/"/>
    
      <category term="MoviePlayer" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/AVFoundation/MoviePlayer/"/>
    
      <category term="MPMoviePlayerController" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/AVFoundation/MoviePlayer/MPMoviePlayerController/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>copy</title>
    <link href="https://github.com/songMW/stack.github.io/2017/07/03/Objective-C/copy/"/>
    <id>https://github.com/songMW/stack.github.io/2017/07/03/Objective-C/copy/</id>
    <published>2017-07-03T06:54:15.000Z</published>
    <updated>2018-01-25T07:35:12.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="strong"><a href="#strong" class="headerlink" title="strong"></a><code>strong</code></h2><p><code>@property (nonatomic,strong)NSString *name;</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)test1</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"iOS"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// str value: iOS , str address: 0x17026fb00</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.name = name;</div><div class="line">    <span class="comment">// self.name value: iOS , self.name address: 0x17026fb00</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.name value: %@ , self.name address: %p"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.name);</div><div class="line">    </div><div class="line">    [str appendString:<span class="string">@" Source Probe"</span>];</div><div class="line">    <span class="comment">// self.name value: iOS Source Probe , self.name address: 0x17026fb00</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.name value: %@ , self.name address: %p"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对 <code>strong</code> 类型的变量进行赋值时，<code>name</code> 指向 <code>str</code> 的地址，<code>name</code> 的值会随着  <code>str</code> 的变化而变化。</p><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a><code>copy</code></h2><p><code>@property (nonatomic,copy)NSString *cy_name;</code></p><h3 id="指向不可变类型"><a href="#指向不可变类型" class="headerlink" title="指向不可变类型"></a>指向不可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)test2</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"iOS"</span>;</div><div class="line">    <span class="comment">// str value: iOS , str address: 0x17026fb80</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.cy_name = str;</div><div class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0x17026fb80</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</div><div class="line"></div><div class="line">    str = <span class="string">@" Source Probe"</span>;</div><div class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0x17026fb80</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对 <code>copy</code> 类型的变量进行赋值时，<code>cy_name</code> 指向  <code>str</code>  的地址，<code>cy_name</code> 的值不会随着  <code>str</code> 的变化而变化。</p><h3 id="指向可变类型"><a href="#指向可变类型" class="headerlink" title="指向可变类型"></a>指向可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)test3</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"iOS"</span>];</div><div class="line">    <span class="comment">// str value: iOS , str address: 0x170270300</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.cy_name = str;</div><div class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0xa00000000534f693</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</div><div class="line"></div><div class="line">    [str appendString:<span class="string">@" Source Probe"</span>];</div><div class="line">    <span class="comment">// self.cy_name value: iOS , self.cy_name address: 0xa00000000534f693</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.cy_name value: %@ , self.cy_name address: %p"</span>, <span class="keyword">self</span>.cy_name, <span class="keyword">self</span>.cy_name);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对 <code>copy</code> 类型的变量进行赋值时，<code>cy_name</code> 指向新的地址，<code>cy_name</code> 的值不会随着  <code>str</code> 的变化而变化。</p><p><code>copy</code>  针对可变类型的变量时，地址会发生变化。</p><h2 id="mutableCopy"><a href="#mutableCopy" class="headerlink" title="mutableCopy"></a><code>mutableCopy</code></h2><h3 id="指向不可变类型-1"><a href="#指向不可变类型-1" class="headerlink" title="指向不可变类型"></a>指向不可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>) test7</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"iOS"</span>;</div><div class="line">    <span class="comment">// str value: iOS , str address: 0x170263c00</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *str_b = [str mutableCopy];</div><div class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</div><div class="line"></div><div class="line">    str = <span class="string">@"Android"</span>;</div><div class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对一个不可变字符串进行深拷贝时，地址发生变化，值不会在改变。</p><h3 id="指向可变类型-1"><a href="#指向可变类型-1" class="headerlink" title="指向可变类型"></a>指向可变类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>) test6</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"iOS"</span>];</div><div class="line">    <span class="comment">// str value: iOS , str address: 0x170263c00</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str value: %@ , str address: %p"</span>, str, str);</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *str_b = [str mutableCopy];</div><div class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</div><div class="line"></div><div class="line">    [str appendString:<span class="string">@" Source Probe"</span>];</div><div class="line">    <span class="comment">// str_b value: iOS , str_b address: 0x1702638c0</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str_b value: %@ , str_b address: %p"</span>, str_b, str_b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对一个可变字符串进行深拷贝时，地址发生变化，值不会在改变。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于系统的非容器类对象，如果对一不可变对象 <code>NSString</code> 复制，<code>copy</code> 是指针复制(浅拷贝) ，<code>mutableCopy</code> 是对象复制(深拷贝)； 如果是对可变对象 <code>NSMutableString</code> 复制，<code>copy</code> 和 <code>mutableCopy</code> 都是深拷贝，但是 <code>copy</code>  返回的对象是不可变的；</li><li>对于系统的容器类对象，对不可变对象 <code>NSArray</code> 进行复制，<code>copy</code> 是指针复制(浅拷贝)，<code>mutableCopy</code> 是对象复制(深拷贝)， 但是不管是 <code>copy</code> 还是 <code>mutableCopy</code>，返回的容器内对象都是指针复制(浅拷贝)；</li><li>对于系统的容器类对象，对可变对象 <code>NSMutableArray</code> 进行复制时，<code>copy</code>  和 <code>mutableCopy</code> 都是对象复制(深拷贝)，但是不管是 <code>copy</code> 还是 <code>mutableCopy</code>，返回的容器内对象都是指针复制(浅拷贝)。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;strong&quot;&gt;&lt;a href=&quot;#strong&quot; class=&quot;headerlink&quot; title=&quot;strong&quot;&gt;&lt;/a&gt;&lt;code&gt;strong&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;@property (nonatomic,strong)NSStrin
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="copy" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/copy/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView的坑</title>
    <link href="https://github.com/songMW/stack.github.io/2017/06/18/Objective-C/WKWebView/"/>
    <id>https://github.com/songMW/stack.github.io/2017/06/18/Objective-C/WKWebView/</id>
    <published>2017-06-18T03:05:05.000Z</published>
    <updated>2018-01-16T10:40:40.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-iOS-8-系统下遇到的问题"><a href="#一-iOS-8-系统下遇到的问题" class="headerlink" title="一: iOS 8 系统下遇到的问题"></a>一: iOS 8 系统下遇到的问题</h2><ol><li>实例化WKWebView后如果不将其添加到父类上, 则其代理方法不回调; iOS 9及以上版本不存在此问题. 大坑~</li></ol><h2 id="二-webView-自适应宽度"><a href="#二-webView-自适应宽度" class="headerlink" title="二: webView 自适应宽度"></a>二: webView 自适应宽度</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    // webView 自适应宽度</div><div class="line">    NSString *<span class="attr">meta</span> = [NSString stringWithFormat:@<span class="string">"document.getElementsByName(\"</span>viewport\<span class="string">")[0].content = \"</span><span class="attr">width=%f,initial-scale=1.0,</span> <span class="attr">minimum-scale=1.0,</span> <span class="attr">maximum-scale=1.0,</span> <span class="attr">user-scalable=no\"",</span> webView.frame.size.width];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:meta];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-iOS-8-系统下遇到的问题&quot;&gt;&lt;a href=&quot;#一-iOS-8-系统下遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;一: iOS 8 系统下遇到的问题&quot;&gt;&lt;/a&gt;一: iOS 8 系统下遇到的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;实例化WKW
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="WKWebView" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/WKWebView/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>KVO</title>
    <link href="https://github.com/songMW/stack.github.io/2017/06/10/Objective-C/KV_X/KVO/"/>
    <id>https://github.com/songMW/stack.github.io/2017/06/10/Objective-C/KV_X/KVO/</id>
    <published>2017-06-10T02:15:23.000Z</published>
    <updated>2018-03-07T06:17:08.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是KVO"><a href="#什么是KVO" class="headerlink" title="什么是KVO?"></a>什么是KVO?</h1><blockquote><p>Key-value observing is a mechanism that allows objects to be notified of changes to specified properties of other objects.</p></blockquote><p><strong> KVO是一种机制，被观察对象指定的属性发生变化时，观察者可以得到通知。</strong></p><blockquote><p>Important: In order to understand key-value observing, you must first understand key-value coding.</p></blockquote><h1 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h1><h2 id="注册观察者"><a href="#注册观察者" class="headerlink" title="注册观察者"></a>注册观察者</h2><ol><li>addObserver ：注册观察者</li><li>forKeyPath ：需要观察对象的属性</li><li>NSKeyValueObservingOptions ：当观察对象的属性值发生变化时，会发送一个通知包含 <code>NSKeyValueChangeNewKey and NSKeyValueChangeOldKey</code></li><li>content ：用于标识KVO，移除特定的KVO</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AdHubKVOModel *testModel = [[AdHubKVOModel alloc]init];</div><div class="line">[testModel addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"keyPath"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div></pre></td></tr></table></figure><h2 id="触发回调"><a href="#触发回调" class="headerlink" title="触发回调"></a>触发回调</h2><p>设置 testModel.keyPath = @”20”;时会触发回调通知<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context</div><div class="line">&#123;</div><div class="line">    <span class="comment">// keyPath ：观察对象的属性</span></div><div class="line">    <span class="comment">// object  ：被观察的对象</span></div><div class="line">    <span class="comment">// change  ：包含 NSKeyValueChangeNewKey and NSKeyValueChangeOldKey</span></div><div class="line">                change[<span class="built_in">NSKeyValueChangeNewKey</span>] / change[<span class="built_in">NSKeyValueChangeOldKey</span>]</div><div class="line">    <span class="comment">// context ：用于标识KVO，移除特定的KVO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="自动通知"><a href="#自动通知" class="headerlink" title="自动通知"></a>自动通知</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Call the accessor method.</span></div><div class="line">[account setName:<span class="string">@"Savings"</span>];</div><div class="line"></div><div class="line"><span class="comment">// Use setValue:forKey:.</span></div><div class="line">[account setValue:<span class="string">@"Savings"</span> forKey:<span class="string">@"name"</span>];</div><div class="line"></div><div class="line"><span class="comment">// Use a key path, where 'account' is a kvc-compliant property of 'document'.</span></div><div class="line">[document setValue: <span class="string">@"Savings"</span> forKeyPath:<span class="string">@"account.name"</span>];</div><div class="line"></div><div class="line"><span class="comment">// Use mutableArrayValueForKey: to retrieve a relationship proxy object.</span></div><div class="line">Transaction *newTransaction = &lt;<span class="meta">#Create a new transaction for the account#&gt;;</span></div><div class="line"><span class="built_in">NSMutableArray</span> *transactions = [account mutableArrayValueForKey:<span class="string">@"transactions"</span>];</div><div class="line">[transactions addObject:newTransaction];</div></pre></td></tr></table></figure><h2 id="手动通知"><a href="#手动通知" class="headerlink" title="手动通知"></a>手动通知</h2><p>需要重写<code>NSKeyValueObserving.h</code>中的方法, 判断当观察的 <code>key</code> 是 <code>balance</code> 时，就将自动通知关闭，其余的情况还是根据父类来进行判断<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForKey:(<span class="built_in">NSString</span> *)theKey &#123;</div><div class="line">    <span class="built_in">BOOL</span> automatic = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> ([theKey isEqualToString:<span class="string">@"balance"</span>]) &#123;</div><div class="line">        automatic = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        automatic = [<span class="keyword">super</span> automaticallyNotifiesObserversForKey:theKey];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> automatic;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong> 返回YES时会自动调用 <code>-willChangeValueForKey:/-didChangeValueForKey:</code> 这两个方法；</strong><br><strong> 返回NO时需要手动设置 <code>-willChangeValueForKey:/-didChangeValueForKey:</code> 这两个方法。</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance &#123;</div><div class="line">    <span class="keyword">if</span> (theBalance != _balance) &#123;</div><div class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"balance"</span>];</div><div class="line">        _balance = theBalance;</div><div class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"balance"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="同时设置多个属性值"><a href="#同时设置多个属性值" class="headerlink" title="同时设置多个属性值"></a>同时设置多个属性值</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance &#123;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"balance"</span>];</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"itemChanged"</span>];</div><div class="line">    _balance = theBalance;</div><div class="line">    _itemChanged = _itemChanged+<span class="number">1</span>;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"itemChanged"</span>];</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"balance"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="移除KVO"><a href="#移除KVO" class="headerlink" title="移除KVO"></a>移除KVO</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[observeredObject removeObserver:observer forKeyPath:keyPath];</div></pre></td></tr></table></figure><p>再次移除同一对象的同一属性会crash;</p><blockquote><p>Terminating app due to uncaught exception ‘NSRangeException’, reason: ‘Cannot remove an observer <xxxxx 0x7f9310e0bec0=""> for the key path “keyPath” from <xxxx 0x600000648c70=""> because it is not registered as an observer.</xxxx></xxxxx></p></blockquote><p><strong> 移除KVO时， 注意：<code>forKeyPath</code>  传入 </strong></p><ul><li>不能为空</li><li>不能是观察对象中不存在的属性</li><li>不能是未被注册观察的属性<br>以上会造成crash：<blockquote><p><em>*</em> Terminating app due to uncaught exception ‘NSRangeException’, reason: ‘-[__NSCFConstantString characterAtIndex:]: Range or index out of bounds</p></blockquote></li></ul><h1 id="原理是什么？"><a href="#原理是什么？" class="headerlink" title="原理是什么？"></a>原理是什么？</h1><blockquote><p>Automatic key-value observing is implemented using a technique called isa-swizzling.</p><p>The isa pointer, as the name suggests, points to the object’s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p><p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p><p>You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</p></blockquote><h2 id="创建一个实例"><a href="#创建一个实例" class="headerlink" title="创建一个实例"></a>创建一个实例</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AdHubKVOModel *testModel = [[AdHubKVOModel alloc]init];</div></pre></td></tr></table></figure><p>打印 testModel 可以发现 :</p><blockquote><p>Printing description of testModel:<br><code>&lt;AdHubKVOModel: 0x60400044c390&gt;</code></p><p>Printing description of testModel:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">NSObject</span>) <span class="built_in">NSObject</span> = &#123;</div><div class="line">    isa = AdHubKVOModel</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>testModel 是AdHubKVOModel 的实例，其isa指针指向AdHubKVOModel</p></blockquote><h2 id="执行注册观察者的方法"><a href="#执行注册观察者的方法" class="headerlink" title="执行注册观察者的方法:"></a>执行注册观察者的方法:</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[testModel addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"keyPath"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div></pre></td></tr></table></figure><p>再次打印 testModel 可以发现：<br>Printing description of testModel:<br><code>&lt;AdHubKVOModel: 0x60400044c390&gt;</code></p><p>Printing description of testModel:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">NSObject</span>) <span class="built_in">NSObject</span> = &#123;</div><div class="line">    isa = <span class="built_in">NSKVONotifying_AdHubKVOModel</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>NSKVONotifying_AdHubKVOModel</code> 是什么？苹果的文档中提起对对象的属性注册观察者时，会对所观察的对象的isa指针进行修改，此时isa指针指向一个中间类，而不是一个真实的类，创建一个以<code>NSKVONotifying_</code>开头的的类名。<br>在这个类中，系统为我们重写了被观察属性的 setter 方法。</p><h2 id="KVO是如何寻找被观察属性的？"><a href="#KVO是如何寻找被观察属性的？" class="headerlink" title="KVO是如何寻找被观察属性的？"></a>KVO是如何寻找被观察属性的？</h2><ol><li>属性对象第一次被观察时，系统会自动生成一个以<code>NSKVONotifying_</code>开头的派生类，并在这个派生类中重写被观察属性的 <code>setter</code> 方法，在 <code>setter</code> 方法内实现通知回调机制；</li><li>每个对象都有一个isa指针指向对象所在类，当一个类对象被首次观察时，会将 <code>isa</code> 指针指向派生类，这点在上文中已经验证过，在派生类中的 <code>setter</code> 方法中真正的实现赋值；</li><li>在派生类中会实现两个方法 <code>willChangeValueForKey:</code> 和 <code>didChangevlueForKey:</code> 其中<code>willChangeValueForKey:</code> 记录旧值；<code>didChangevlueForKey:</code> 记录新值；</li><li>紧接着<code>observeValueForKey:ofObject:change:context:</code> 被调用，此时即可获取到被观察属性值的变化。</li><li>如果在当前类中未找到要监测的属性，则会向当前类的父类中查找。。。一直找下去，找到执行第一步；没有找到，则不会触发通知回调。</li></ol><h2 id="限制条件是什么？"><a href="#限制条件是什么？" class="headerlink" title="限制条件是什么？"></a>限制条件是什么？</h2><h3 id="一：forKeyPath-为实例对象是否可以？"><a href="#一：forKeyPath-为实例对象是否可以？" class="headerlink" title="一：forKeyPath 为实例对象是否可以？"></a><em>一：<code>forKeyPath</code> 为实例对象是否可以？</em></h3><p>可以，但KVO不会触发回调通知。</p><h3 id="二：forKeyPath-为不存在的实例对象是否可以？"><a href="#二：forKeyPath-为不存在的实例对象是否可以？" class="headerlink" title="二：forKeyPath 为不存在的实例对象是否可以？"></a><em>二：<code>forKeyPath</code> 为不存在的实例对象是否可以？</em></h3><p>可以，但KVO不会触发回调通知。</p><h3 id="三：forKeyPath-为空-nil-时是否可以？"><a href="#三：forKeyPath-为空-nil-时是否可以？" class="headerlink" title="三：forKeyPath 为空 / nil 时是否可以？"></a><em>三：<code>forKeyPath</code> 为空 / nil 时是否可以？</em></h3><p>会造成crash：</p><blockquote><p><em>*</em> Terminating app due to uncaught exception ‘NSRangeException’, reason: ‘-[__NSCFConstantString characterAtIndex:]: Range or index out of bounds</p></blockquote><h3 id="四：-forKeyPath-为方法名是否可以？"><a href="#四：-forKeyPath-为方法名是否可以？" class="headerlink" title="四： forKeyPath 为方法名是否可以？"></a><em>四： <code>forKeyPath</code> 为方法名是否可以？</em></h3><p>可以，但KVO不会触发回调通知。</p><h3 id="五：如果手动为实例对象创建一个setter方法是否可以？"><a href="#五：如果手动为实例对象创建一个setter方法是否可以？" class="headerlink" title="五：如果手动为实例对象创建一个setter方法是否可以？"></a><em>五：如果手动为实例对象创建一个<code>setter</code>方法是否可以？</em></h3><p>可以，因为KVO监测的是被监测对象属性的 <code>setter</code> 方法。</p><h3 id="六：同一个类中注册多个KVO会怎么样？"><a href="#六：同一个类中注册多个KVO会怎么样？" class="headerlink" title="六：同一个类中注册多个KVO会怎么样？"></a><em>六：同一个类中注册多个KVO会怎么样？</em></h3><p>所有的回调都是走同一个回调方法，需要对触发回调函数的来源进行判断。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context</div><div class="line">&#123;</div><div class="line">    <span class="comment">// keyPath ：观察对象的属性, 可用于判断触发回调函数的来源</span></div><div class="line">    <span class="comment">// object  ：被观察的对象</span></div><div class="line">    <span class="comment">// change  ：包含 NSKeyValueChangeNewKey and NSKeyValueChangeOldKey</span></div><div class="line">    <span class="comment">// context ：用于标识KVO，移除特定的KVO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="七：被观察类的父类中也实现了KVO会怎么样？"><a href="#七：被观察类的父类中也实现了KVO会怎么样？" class="headerlink" title="七：被观察类的父类中也实现了KVO会怎么样？"></a><em>七：被观察类的父类中也实现了KVO会怎么样？</em></h3><p>比如被观察类A，其父类为superA，superA中也实现了KVO，那么在C类中添加对A类的某个属性的观察，会怎么样？<br>被观察属性值都发生变化，先走C类中的回调方法，然后在走superA类中的回调方法。</p><p>总结： <code>forKeyPath</code> 不能为空，或则会crash，找不到则不会出发通知。</p><h2 id="模拟实现系统KVO"><a href="#模拟实现系统KVO" class="headerlink" title="模拟实现系统KVO"></a>模拟实现系统KVO</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^HBKVOCallBack)(<span class="built_in">NSDictionary</span> *info);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueChangeKey = <span class="string">@"HBKeyValueChangeKey"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueChangeNewKey = <span class="string">@"HBKeyValueChangeNewKey"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueChangeOldKey = <span class="string">@"HBKeyValueChangeOldKey"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueObserver = <span class="string">@"HBKeyValueObserver"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueKeyPath = <span class="string">@"HBKeyValueKeyPath"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKeyValueContent = <span class="string">@"HBKeyValueContent"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">HBHookKVO</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)HB_addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="built_in">NSString</span> *)content KVOCallBackBlock:(HBKVOCallBack)block;</div><div class="line">- (<span class="keyword">void</span>)HB_removeObserverAllPath:(<span class="built_in">NSObject</span> *)observer;</div><div class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</div><div class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="built_in">NSString</span> *)content;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSObject+HBHookKVO.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="keyword">const</span> kObserver = <span class="string">"kObserver"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="keyword">const</span> kObserverKeyPath = <span class="string">"kObserverKeyPath"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="keyword">const</span> kKVOCallBackBlock = <span class="string">"kKVOCallBackBlock"</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> HBKVOClassPrefix = <span class="string">@"NSKVONotifying_"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">HBHookKVO</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)HB_addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="built_in">NSString</span> *)content KVOCallBackBlock:(HBKVOCallBack)block</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 判断传入的keyPath是否存在</span></div><div class="line">    <span class="keyword">if</span> (!keyPath || !keyPath.length) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kObserver, observer, OBJC_ASSOCIATION_ASSIGN);</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kObserverKeyPath, keyPath, OBJC_ASSOCIATION_ASSIGN);</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kKVOCallBackBlock, block, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line"></div><div class="line">    <span class="comment">// 判断属性是否存在</span></div><div class="line">    SEL setterSel = [<span class="keyword">self</span> addNewSetterMethod:keyPath];</div><div class="line"></div><div class="line">    Class newClass = object_getClass(<span class="keyword">self</span>);</div><div class="line">    <span class="comment">// 判断当前类是否是KVO中间类</span></div><div class="line">    <span class="built_in">NSString</span> *className = <span class="built_in">NSStringFromClass</span>(newClass);</div><div class="line">    <span class="keyword">if</span> (![className containsString:HBKVOClassPrefix]) &#123;</div><div class="line">    <span class="comment">// 动态创建一个类</span></div><div class="line">        <span class="built_in">NSString</span> *newName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>, HBKVOClassPrefix, <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>.class)];</div><div class="line">        Class kvoClass = <span class="built_in">NSClassFromString</span>(newName);</div><div class="line">        <span class="keyword">if</span> (!kvoClass) &#123;</div><div class="line">            newClass = objc_allocateClassPair(<span class="keyword">self</span>.class, newName.UTF8String, <span class="number">0</span>);</div><div class="line">            <span class="comment">// 注册这个类</span></div><div class="line">            objc_registerClassPair(newClass);</div><div class="line">            <span class="comment">// 改变isa指针</span></div><div class="line">            object_setClass(<span class="keyword">self</span>, newClass);</div><div class="line">            newClass = [<span class="keyword">self</span> <span class="keyword">class</span>];</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        object_setClass(<span class="keyword">self</span>, kvoClass);</div><div class="line">        newClass = kvoClass;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断对象的类是否重写过对象的setter方法</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> hasSelector:setterSel <span class="keyword">class</span>:<span class="keyword">self</span>.class]) &#123;</div><div class="line">        class_addMethod(newClass, setterSel, (IMP)kvo_setter, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)HB_removeObserverAllPath:(<span class="built_in">NSObject</span> *)observer</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> HB_removeObserver:observer forKeyPath:<span class="literal">nil</span> context:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> HB_removeObserver:observer forKeyPath:keyPath context:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)HB_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="built_in">NSString</span> *)content</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (![<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) hasPrefix:HBKVOClassPrefix]) <span class="keyword">return</span>;</div><div class="line">        object_setClass(<span class="keyword">self</span>, class_getSuperclass([<span class="keyword">self</span> <span class="keyword">class</span>]));</div><div class="line">        objc_removeAssociatedObjects(<span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (SEL)addNewSetterMethod:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">&#123;</div><div class="line">    SEL setterSel = <span class="built_in">NSSelectorFromString</span>(setterForVar(keyPath));</div><div class="line">    <span class="keyword">return</span> setterSel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)hasSetterMethodWithKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">&#123;</div><div class="line">    <span class="built_in">BOOL</span> result = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 遍历当前类和其父类中的所有属性</span></div><div class="line">    Class <span class="keyword">class</span> = <span class="keyword">self</span>.class;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">class</span>) &#123;</div><div class="line">        objc_property_t *property = class_copyPropertyList(<span class="keyword">class</span>, &amp;count);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            objc_property_t t = property[i];</div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = property_getName(t);</div><div class="line">            <span class="built_in">NSString</span> *key = [[<span class="built_in">NSString</span> alloc]initWithUTF8String:name];</div><div class="line">            <span class="keyword">if</span> ([key isEqualToString:keyPath]) &#123;</div><div class="line">                result = <span class="literal">YES</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (result)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">   </div><div class="line">        <span class="keyword">class</span> = class_getSuperclass(<span class="keyword">class</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)hasSelector:(SEL)sel <span class="keyword">class</span>:(Class)sClass</div><div class="line">&#123;</div><div class="line">    <span class="built_in">BOOL</span> result = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> methodCount = <span class="number">0</span>;</div><div class="line">    Method *methodList = class_copyMethodList(sClass, &amp;methodCount);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (sel == method_getName(methodList[i])) &#123;</div><div class="line">            result = <span class="literal">YES</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Core method</span></div><div class="line"><span class="keyword">void</span> kvo_setter(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSString</span> *key)&#123;</div><div class="line">    <span class="keyword">struct</span> objc_super superClass = &#123;</div><div class="line">        .receiver = <span class="keyword">self</span>,</div><div class="line">        .super_class = class_getSuperclass(object_getClass(<span class="keyword">self</span>))</div><div class="line">    &#125;;</div><div class="line">    ((<span class="keyword">void</span> (*)(<span class="keyword">void</span> *, SEL, <span class="keyword">id</span>))objc_msgSendSuper)(&amp;superClass, _cmd, key);</div><div class="line"></div><div class="line">    <span class="built_in">NSObject</span> *observer = objc_getAssociatedObject(<span class="keyword">self</span>, kObserver);</div><div class="line">    <span class="built_in">NSString</span> *keyPath = objc_getAssociatedObject(<span class="keyword">self</span>, kObserverKeyPath);</div><div class="line">    <span class="built_in">NSDictionary</span> *dict = @&#123;HBKeyValueKeyPath : keyPath, HBKeyValueObserver: observer, HBKeyValueChangeKey : @&#123;<span class="built_in">NSKeyValueChangeNewKey</span> : key&#125;, HBKeyValueContent : <span class="string">@""</span>&#125;;</div><div class="line">    HBKVOCallBack block = objc_getAssociatedObject(<span class="keyword">self</span>, kKVOCallBackBlock);</div><div class="line">    <span class="keyword">if</span> (block)</div><div class="line">        block(dict);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *setterForVar(<span class="built_in">NSString</span> *keyPath)&#123;</div><div class="line">    <span class="built_in">NSString</span> *firstChar = [keyPath substringToIndex:<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> ([firstChar isEqualToString:<span class="string">@"_"</span>]) &#123;</div><div class="line">        firstChar = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@:"</span>, keyPath];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        firstChar = firstChar.uppercaseString;</div><div class="line">        keyPath = [keyPath stringByReplacingCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>) withString:firstChar];</div><div class="line">        firstChar = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@:"</span>, keyPath];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> firstChar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是KVO&quot;&gt;&lt;a href=&quot;#什么是KVO&quot; class=&quot;headerlink&quot; title=&quot;什么是KVO?&quot;&gt;&lt;/a&gt;什么是KVO?&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Key-value observing is a mechanism that
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="KnowledgeLists" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/"/>
    
      <category term="KV_X" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/KV-X/"/>
    
      <category term="KVO" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/KnowledgeLists/KV-X/KVO/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>pod搜索不到解决方法</title>
    <link href="https://github.com/songMW/stack.github.io/2017/06/04/Objective-C/CrashCollection/%E6%90%9C%E7%B4%A2%E4%B8%8D%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/songMW/stack.github.io/2017/06/04/Objective-C/CrashCollection/搜索不到解决方法/</id>
    <published>2017-06-04T09:49:38.000Z</published>
    <updated>2018-03-01T07:18:22.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pod搜索不到"><a href="#pod搜索不到" class="headerlink" title="pod搜索不到"></a>pod搜索不到</h2><p>成功发布pod, 使用pod install可以成功添加自己发布的pod到工程,但是却用pod serach 搜索时报错: Unable to find a pod with name, author, summary, or description matching [podname]</p><ol><li>执行pod setup<br>终端输入：pod setup<br>会出现Setting up CocoaPods master repo，稍等几十秒，最底下会输出Setup completed。说明执行pod setup成功。</li><li>如果pod search操作还是搜索失败，如下：<br>终端输入：pod search [podname]<br>输出：Unable to find a pod with name, author, summary, or descriptionmatching [podname] 这时就需要继续下面的步骤了。<br>删除~/Library/Caches/CocoaPods目录下的search_index.json文件<br>pod setup成功后，依然不能pod search，是因为之前你执行pod search生成了search_index.json，此时需要删掉。</li><li>~/Library/Caches/CocoaPods/ 删除search_index.json再执行pod search<br>终端输入：pod search [podname] (不区分大小写)<br>输出：Creating search index for spec repo ‘master’.. Done!，稍等片刻······就会出现所有带有 [podname] 字段的类库。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pod搜索不到&quot;&gt;&lt;a href=&quot;#pod搜索不到&quot; class=&quot;headerlink&quot; title=&quot;pod搜索不到&quot;&gt;&lt;/a&gt;pod搜索不到&lt;/h2&gt;&lt;p&gt;成功发布pod, 使用pod install可以成功添加自己发布的pod到工程,但是却用pod se
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/"/>
    
      <category term="CrashCollection" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/CrashCollection/"/>
    
      <category term="pod搜索不到解决方法" scheme="https://github.com/songMW/stack.github.io/categories/Objective-C/CrashCollection/pod%E6%90%9C%E7%B4%A2%E4%B8%8D%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Objective-C" scheme="https://github.com/songMW/stack.github.io/tags/Objective-C/"/>
    
  </entry>
  
</feed>
